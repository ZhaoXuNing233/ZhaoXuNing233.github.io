<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>回首向来萧瑟处·blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-25T01:00:33.491Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>赵旭宁</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《昨天，今天，明天》</title>
    <link href="http://yoursite.com/2019/10/24/totwomore/"/>
    <id>http://yoursite.com/2019/10/24/totwomore/</id>
    <published>2019-10-24T07:50:57.000Z</published>
    <updated>2019-10-25T01:00:33.491Z</updated>
    
    <content type="html"><![CDATA[<p>二多亲启<br><a id="more"></a></p><h2 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-若只如初见"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-若只如初见" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;若只如初见"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;若只如初见</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;霜序飞叶，秋意渐浓。眼看着街上冷冷清清飘满黄叶的街道，情绪万种。因为每到这个时节心中总会惦记起，曾经那个七月流火，却充满青春、欢乐和青涩的那一年，咱们大家彼此初识的那一年。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主教楼前的广场，众多学院各个协会彼此摩拳擦掌，协会里纳新的学长们目不转睛的看着来来往往的漂亮学妹们，九月的凉爽也无法抑制那广场上洋溢着的青春的气息。那架势让那些迷茫的新生有一种张无忌误闯光明顶的迷茫和困惑。当然我和朕哥哥也在百无聊赖的期待着新人的到来。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;“学长学长，我可以加入推理协会吗？”，一个干净利落短发，脸上还有些许稚气的女生嬉皮笑脸的问着。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;“当然可以啦，你叫什么名字？哪个学院的新生呢？”<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;“我叫张珣，你们也可以叫我张二多”。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;嗯，就是从那时起，张二多正式加入漫威宇宙。</p><h2 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-跟往事干杯"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-跟往事干杯" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟往事干杯"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟往事干杯</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;怀念阶梯教室里的杀人游戏，因为青洲奋不顾身在“狼狗”的道路上愈行愈远而放肆嘲笑；因为彼此一个眼神就打出了完美配合而欣喜若狂；因为陌生人的污言秽语而和别人争执的面红耳赤。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;怀念田家炳周末的经典悬疑电影，沉浸在恐怖游轮的烧脑循环；疑惑在穆赫兰道似幻似实的叙事手法；装酷的在刘建明和陈永仁在天台上飙戏时，模仿着说出“对不起，我是警察”的二逼样子。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;怀念一起在金宇和园牵着黑米散步，吃着青洲精心烹制的豆角和你做的豪华三明治；孤男寡女三更半夜一起看小智视频。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;怀念一起在网吧为了召唤师峡谷的花花草草而与敌人并肩作战，会因为谁谁坑了而破口大骂，战绩好了而夸夸其谈。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那时傍晚的风很轻，街头的欢笑声很多，咱们两三好友手握饮料，拎拿着樱桃和甜甜的小馒头慢悠悠的走，把烦恼暂时放下，慢悠悠的看灯火通明，看月亮和星星眨着眼睛，共度温柔的好夜。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大学，美妙的人生阶段，她的名字叫怀念。</p><h2 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-而今识尽愁滋味，欲说还休"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-而今识尽愁滋味，欲说还休" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而今识尽愁滋味，欲说还休"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而今识尽愁滋味，欲说还休</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看过一句话说的不错，“原来成年人的感情，是不追问，是不解释，是心照不宣，是突然走散，是自然消减，是一种冰冷的默契”。我们大学毕业之后，那段时间咱们就不经常在一起了，真正的变为了网友，也有欢声笑语。就像我和青洲督促你考研，一起开黑打游戏。但是总觉得那段时间的你变了很多。后来听人说起，可能是由于遇见的一些人一些事儿，总觉得那阶段的你不开心了，不是真正的快乐。总之，那段时间我觉得咱们之间出现了距离感，那时候我会觉得二多变了好多，没有以前我认识的二多可爱了。其实仔细想想，你有你自己的苦衷和心酸，我没经过了解和调查又怎能轻易的对你妄下评论呢？那段时间确实有这个想法，但后来发现你还是那个天天真真的小可爱的时候，才真正的释怀。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二多，面对你的成长大家都替你觉得开心，但是遇到不顺心或者烦心事儿的时候，希望我也可以成为你的一位“倾听者”，和我说些你的心里话，不要总是痛苦自己背负，宿醉到天明。其实有喜有悲才是人生，有苦有甜才是生活，再大的伤痛睡一觉就把它忘了。老是背着昨天，会累坏自己，边走边忘才能好好感受到每一个幸福，你说是么？</p><h2 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-感谢再三"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-感谢再三" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;感谢再三"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;感谢再三</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二多感谢你，正愁没人教，天上掉下个粘豆包。公元二零一九年让我认识了美丽又魅力，睿智又弱智的涵姐。我平时也总是和你雪姐说，真是感谢张二多这小逼能把你拉进模特队。你雪姐平时总在和我念叨你，她是真的很关心牵挂你。感谢一起奋战在峡谷的日日夜夜，感谢在模特队的日夜陪伴，感谢你给我们带来欢声笑语，感谢学校，感谢老师，感谢咱们班楼层不高。万语千言，感谢再三。</p><h2 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-The-End"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-The-End" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The End"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The End</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;爱你所爱，行你所行，听从你心，无问西东。祝愿你，有一双善于发现美的眼睛，喜爱周遭琐碎的、朴素的美好。有一颗可爱温柔的心，欢乐且静好地度过年年岁岁。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;希望你被打磨，永远光明磊落。希望你能走过山山水水，写温柔的字，坦荡地爱。希望你被阅读，不被辜负。相信最后你也定会感谢这微不足道的祝愿。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二多亲启&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>海盗分金</title>
    <link href="http://yoursite.com/2019/05/05/pirate/"/>
    <id>http://yoursite.com/2019/05/05/pirate/</id>
    <published>2019-05-05T02:39:57.000Z</published>
    <updated>2019-06-10T09:02:19.999Z</updated>
    
    <content type="html"><![CDATA[<p>海盗分金问题的结题步骤和对于该问题的推广探索<br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨日闲暇饭后之余和一众老友谈论到宇宙，外星人。又从外星人话题扯到了博弈论。于是老生常谈，我还是出了那道最经典的海盗分金问题供大家饭后消遣。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>假设在一艘船上有5名海盗，并偶然间得到了100枚金币，现在要按照顺序，每名海盗提出一种具体的分配金币的意见（具体到每一个人应分得多少枚金币），由在场所有海盗（包括自己）进行表决，<strong>若大于一半的人认可此方案，方案通过，否则，此海盗将被扔入大海。</strong>，但是这五名海盗有着自己的生存秩序，分别排列成了“老大”，“老二”，“老三”，“老四”，“老五”（相应的他们的地位也是这样排序，老大先提方案，然后老二，老三等等）。假设每名海盗都是经济学假定的“理性人”，即绝顶聪明，能充分考虑到每一种情况而进行每次的判断，在投票过程中海盗们不能交流，且它们都遵守此规则问第一名海盗应该怎样提出分配方案，才能使自己的方案通过且自身利益最大化？</p><h2 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h2><p><strong>解决此类问题最好的办法就是用倒推法，其中我认为包含了一种递归的思想</strong></p><ul><li>step 1</li></ul><p>当只有最后两名海盗，绰号分别是老四老五的时候（其他三个估计已经死了）。此时，会出现一种情况，就是老四提任何方案，都已经可以无视老五的选择，因为始终他自己会有1票同意，达到50%<br><br>所以此时，老四的方案一定是自己100枚金币，老五0个，此时无论老五如何投反对票，都不会影响方案。<br><br>得出结论：(n=2)——&gt;(100,0)</p><ul><li>step 2</li></ul><p>如果此时老三在场的话，会如何决策呢？老四首先不论如何都不会同意老三的方案，并且希望老三赶紧死，然后自己就可以独吞这100个金币。所以老三如果想要票数超过50%，那在3个人中，除了自己一定要争取到1票，所以他只要给老五1个金币，老五就会无条件的支持他（因为老五也是聪明人，如果老五不同意，老三死了之后，又回到了老四的方案，在老四的方案中他一个金币都得不到）。<br><br>得出结论：(n=3)———&gt;(99,0,1)</p><ul><li>step 3</li></ul><p>同以上的推论，老二的方案中老三也是无论如何都要投反对票的，而且老二需要争取到另外1票就可以了。所以，此时老二给了上一轮在老三的方案中一无所有的老四一枚金币，这样老四就会支持他了。（老四的视角中，如果到了老三的方案他将一无所有，所以老二只需给他1个金币就可以成功收买）<br>得出结论：（n=4）——&gt;(99,0,1,0)</p><ul><li>step 4</li></ul><p>推理同上，老大需要3票支持，出去自己1票，还需要争取2票同意。所以容易得知，老二无论如何争取不到，只需要争取在老二的方案中一无所获的老三和老五就可以了，分别给1个金币就ok。<br>得出结论：（n=5）——&gt;(98,0,1,0,1)</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>若此时有10名海盗参与投票分赃，推理过程略，思想都一样，如下图所示具体的方案</p><table><thead><tr><th>海盗数量</th><th>海盗1</th><th>海盗2</th><th>海盗3</th><th>海盗4</th><th>海盗5</th><th>海盗6</th><th>海盗7</th><th>海盗8</th><th>海盗9</th><th>海盗10</th></tr></thead><tbody><tr><td>n=1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>100</td></tr><tr><td>n=2</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>100</td><td>0</td></tr><tr><td>n=3</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>99</td><td>0</td><td>1</td></tr><tr><td>n=4</td><td></td><td></td><td></td><td></td><td></td><td></td><td>99</td><td>0</td><td>1</td><td>0</td></tr><tr><td>n=5</td><td></td><td></td><td></td><td></td><td></td><td>98</td><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td>n=6</td><td></td><td></td><td></td><td></td><td>98</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>n=7</td><td></td><td></td><td></td><td>97</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td>n=8</td><td></td><td></td><td>97</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>n=9</td><td></td><td>96</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td>n=10</td><td>96</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td></tr></tbody></table><p>经过推理得出以上10名海盗的分金币情况，进一步抽象后，可以得出人数n和第一名海盗金币个数的表格</p><table><thead><tr><th>海盗数量</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>第一名金币数量</td><td>100</td><td>100</td><td>99</td><td>99</td><td>98</td><td>98</td><td>97</td><td>97</td><td>96</td><td>96</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通项公式：X = 101 - [(n+1)/2]</span><br><span class="line">n为海盗数量，X为当前提方案海盗应该得到的金币数，[]为取整运算</span><br></pre></td></tr></table></figure><h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><p>已知通项公式 X = 101 - [(n+1)/2]<br><strong>当X=0时，n值为201,202，那么以上X,n所代表的意义是什么？</strong><br>可以这么理解，当有201个海盗的时候，第一个海盗提的方案，就是自己拿的金币数为0（为了保命），剩下的100枚金币全部用于贿赂那些相隔一位的海盗。</p><p>得出如下总结：</p><ul><li>当n=201及n=202时，201号/202号海盗的最大化收益为0，但可保命。</li><li>当n=203时，203号海盗必须获得102张赞成票，但他无法用100个宝石收买到101名同伙的支持。因此，无论203号提出什么样的分配方案，他都注定会被扔到海里去喂鱼。</li><li>当n=204时，204号海盗必须获得102张赞成票，203号为了能保住性命，就必须让204号的方案通过，避免由203号自己来提出分配方案，所以无论204号海盗提出什么样的方案，都可以得到203号的坚定支持。这样204号海盗就可以保命：他可以得到他自己的1票、203号的1票、以及用100个宝石收买到的100名同伙的赞成票，刚好达到所需的半数支持。能从204号那里获得1个宝石的海盗，必属于按照202号海盗的方案将一无所获的那102名海盗之列。</li><li>当n=205时，205号海盗必须获得103张赞成票，但他无法用100个宝石收买到102名同伙的支持。因此，无论205提出什么样的分配方案，他都注定会被扔到海里去喂鱼。</li><li>当n=206时，206号海盗必须获得103张赞成票，他可以得到205号的坚定支持，但他无法用100个宝石收买到101名同伙的支持。因此，无论206号提出什么样的分配方案，他都注定会被扔到海里去喂鱼。</li><li>当n=207时，207号海盗必须获得104张赞成票，他可以得到205号和206号的坚定支持，但他无法用100个宝石收买到101名同伙的支持。因此，无论207号提出什么样的分配方案，他都注定会被扔到海里去喂鱼。</li><li>当n=208时，208号海盗必须获得104张赞成票，他可以得到205号、206号、207号的坚定支持，加上他自己1票以及收买的100票，使他得以保命。从208号那里获得1个宝石的海盗，必属于那些按照204号方案将一无所获的那104名海盗之列。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">眼下可以看出一条新的、此后将一直有效的规律：</span><br><span class="line"></span><br><span class="line">那些方案能通过的海盗（他们的分配方案全都是把宝石用来收买100名同伙，自己连1个宝石都得不到）相隔的距离越来越远，而在他们之间的海盗则无论提出什么样的方案都会被扔进海里。因此，为了保命，他们必会投票支持排在他们前面的海盗提出的任何分配方案。得以避免葬身鱼腹的海盗包括201、202、204、208、216、232、264、328、456号，</span><br><span class="line">即200+1、200+2、200+4、200+8、200+16、200+32、200+64、200+128、200+256。即</span><br><span class="line">200+2的0次幂，200+2的1次幂，200+2的2次幂，200+2的3次幂，200+2的4次幂，200+2的5次幂，200+2的6次幂，200+2的7次幂，200+2的8次幂，</span><br><span class="line">即其号码等于200加2的某次幂。</span><br></pre></td></tr></table></figure><h2 id="未完"><a href="#未完" class="headerlink" title="未完"></a>未完</h2><p>目前只探讨了，对于海盗人数是发散的讨论，并没有对于金币数和海盗人数同时讨论的情况，当海盗人数和金币数都为变量时，则可以画出一个函数图像，有时间会继续思考，就到这里了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;海盗分金问题的结题步骤和对于该问题的推广探索&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="博弈论" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>集成Tinker实现热更新</title>
    <link href="http://yoursite.com/2019/04/09/hotfix/"/>
    <id>http://yoursite.com/2019/04/09/hotfix/</id>
    <published>2019-04-09T05:29:57.000Z</published>
    <updated>2019-04-09T06:18:51.414Z</updated>
    
    <content type="html"><![CDATA[<p>集成bugly的tinker实现app的热更新<br><a id="more"></a></p><h2 id="进入Bugly"><a href="#进入Bugly" class="headerlink" title="进入Bugly"></a>进入Bugly</h2><p>bugly是腾讯团队开源的一个异常上报，运营统计平台。其中有一些使用的功能，比如异常上报，在线升级和热更新等。而热更新就是今天要记录的重点。<br><br><a href="https://bugly.qq.com/v2/" target="_blank" rel="noopener">bugly的官网</a>点这里</p><h2 id="申请自己的产品"><a href="#申请自己的产品" class="headerlink" title="申请自己的产品"></a>申请自己的产品</h2><p>因为是腾讯家的平台，所以我们用QQ号或者微信号就可以登录了，然后去个人中心申请自己的产品，拿到key（所有第三方都是这么个套路）<br><img src="/2019/04/09/hotfix/newproduct.png" alt><br><br>登录完，申请完了之后，如下拿到属于自己产品的AppID<br><br><img src="/2019/04/09/hotfix/appid.png" alt></p><h2 id="集成热更新组件Tinker"><a href="#集成热更新组件Tinker" class="headerlink" title="集成热更新组件Tinker"></a>集成热更新组件Tinker</h2><p>详细的关于tinker的使用方式和开发文档请查看bugly的官方文档<a href="https://bugly.qq.com/docs/user-guide/instruction-manual-android-hotfix/?v=20181014122344" target="_blank" rel="noopener">点我查看文档</a></p><h3 id="1-添加插件依赖"><a href="#1-添加插件依赖" class="headerlink" title="1.添加插件依赖"></a>1.添加插件依赖</h3><p>工程根目录下“build.gradle”文件中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        // tinkersupport插件, 其中lastest.release指拉取最新版本，也可以指定明确版本号，例如1.0.4</span><br><span class="line">        classpath &quot;com.tencent.bugly:tinker-support:1.1.5&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-集成SDK"><a href="#2-集成SDK" class="headerlink" title="2.集成SDK"></a>2.集成SDK</h3><p>在app module的“build.gradle”文件中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">compile &quot;com.android.support:multidex:1.0.1&quot; // 多dex配置</span><br><span class="line">compile &apos;com.tencent.bugly:crashreport_upgrade:1.3.6&apos;</span><br><span class="line">compile &apos;com.tencent.tinker:tinker-android-lib:1.9.9&apos;</span><br><span class="line">compile &apos;com.tencent.bugly:nativecrashreport:latest.release&apos;</span><br></pre></td></tr></table></figure></p><h3 id="3-添加依赖插件脚本"><a href="#3-添加依赖插件脚本" class="headerlink" title="3.添加依赖插件脚本"></a>3.添加依赖插件脚本</h3><p>在app module的“build.gradle”文件中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply from: &apos;tinker-support.gradle&apos;</span><br></pre></td></tr></table></figure></p><h3 id="4-配置tinker-support-gradle"><a href="#4-配置tinker-support-gradle" class="headerlink" title="4.配置tinker-support.gradle"></a>4.配置tinker-support.gradle</h3><p>直接从官方文档上复制粘贴即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;com.tencent.bugly.tinker-support&apos;</span><br><span class="line"></span><br><span class="line">def bakPath = file(&quot;$&#123;buildDir&#125;/bakApk/&quot;)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 此处填写每次构建生成的基准包目录</span><br><span class="line"> */</span><br><span class="line">def baseApkDir = &quot;app-0208-15-10-00&quot;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 对于插件各参数的详细解析请参考</span><br><span class="line"> */</span><br><span class="line">tinkerSupport &#123;</span><br><span class="line"></span><br><span class="line">    // 开启tinker-support插件，默认值true</span><br><span class="line">    enable = true</span><br><span class="line"></span><br><span class="line">    // 指定归档目录，默认值当前module的子目录tinker</span><br><span class="line">    autoBackupApkDir = &quot;$&#123;bakPath&#125;&quot;</span><br><span class="line"></span><br><span class="line">    // 是否启用覆盖tinkerPatch配置功能，默认值false</span><br><span class="line">    // 开启后tinkerPatch配置不生效，即无需添加tinkerPatch</span><br><span class="line">    overrideTinkerPatchConfiguration = true</span><br><span class="line"></span><br><span class="line">    // 编译补丁包时，必需指定基线版本的apk，默认值为空</span><br><span class="line">    // 如果为空，则表示不是进行补丁包的编译</span><br><span class="line">    // @&#123;link tinkerPatch.oldApk &#125;</span><br><span class="line">    baseApk = &quot;$&#123;bakPath&#125;/$&#123;baseApkDir&#125;/app-release.apk&quot;</span><br><span class="line"></span><br><span class="line">    // 对应tinker插件applyMapping</span><br><span class="line">    baseApkProguardMapping = &quot;$&#123;bakPath&#125;/$&#123;baseApkDir&#125;/app-release-mapping.txt&quot;</span><br><span class="line"></span><br><span class="line">    // 对应tinker插件applyResourceMapping</span><br><span class="line">    baseApkResourceMapping = &quot;$&#123;bakPath&#125;/$&#123;baseApkDir&#125;/app-release-R.txt&quot;</span><br><span class="line"></span><br><span class="line">    // 构建基准包和补丁包都要指定不同的tinkerId，并且必须保证唯一性</span><br><span class="line">    tinkerId = &quot;base-1.0.1&quot;</span><br><span class="line"></span><br><span class="line">    // 构建多渠道补丁时使用</span><br><span class="line">    // buildAllFlavorsDir = &quot;$&#123;bakPath&#125;/$&#123;baseApkDir&#125;&quot;</span><br><span class="line"></span><br><span class="line">    // 是否启用加固模式，默认为false.(tinker-spport 1.0.7起支持）</span><br><span class="line">    // isProtectedApp = true</span><br><span class="line"></span><br><span class="line">    // 是否开启反射Application模式</span><br><span class="line">    enableProxyApplication = false</span><br><span class="line"></span><br><span class="line">    // 是否支持新增非export的Activity（注意：设置为true才能修改AndroidManifest文件）</span><br><span class="line">    supportHotplugComponent = true</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 一般来说,我们无需对下面的参数做任何的修改</span><br><span class="line"> * 对于各参数的详细介绍请参考:</span><br><span class="line"> * https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97</span><br><span class="line"> */</span><br><span class="line">tinkerPatch &#123;</span><br><span class="line">    //oldApk =&quot;$&#123;bakPath&#125;/$&#123;appName&#125;/app-release.apk&quot;</span><br><span class="line">    ignoreWarning = false</span><br><span class="line">    useSign = true</span><br><span class="line">    dex &#123;</span><br><span class="line">        dexMode = &quot;jar&quot;</span><br><span class="line">        pattern = [&quot;classes*.dex&quot;]</span><br><span class="line">        loader = []</span><br><span class="line">    &#125;</span><br><span class="line">    lib &#123;</span><br><span class="line">        pattern = [&quot;lib/*/*.so&quot;]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res &#123;</span><br><span class="line">        pattern = [&quot;res/*&quot;, &quot;r/*&quot;, &quot;assets/*&quot;, &quot;resources.arsc&quot;, &quot;AndroidManifest.xml&quot;]</span><br><span class="line">        ignoreChange = []</span><br><span class="line">        largeModSize = 100</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    packageConfig &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    sevenZip &#123;</span><br><span class="line">        zipArtifact = &quot;com.tencent.mm:SevenZip:1.1.10&quot;</span><br><span class="line">//        path = &quot;/usr/local/bin/7za&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    buildConfig &#123;</span><br><span class="line">        keepDexApply = false</span><br><span class="line">        //tinkerId = &quot;1.0.1-base&quot;</span><br><span class="line">        //applyMapping = &quot;$&#123;bakPath&#125;/$&#123;appName&#125;/app-release-mapping.txt&quot; //  可选，设置mapping文件，建议保持旧apk的proguard混淆方式</span><br><span class="line">        //applyResourceMapping = &quot;$&#123;bakPath&#125;/$&#123;appName&#125;/app-release-R.txt&quot; // 可选，设置R.txt文件，通过旧apk文件保持ResId的分配</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong> <strong>enableProxyApplication = false表示不使用反射的方式</strong></p><h2 id="5-初始化SDK"><a href="#5-初始化SDK" class="headerlink" title="5.初始化SDK"></a>5.初始化SDK</h2><p>如图，在自己的Application中进行初始化<br><img src="/2019/04/09/hotfix/oncreate.png" alt><br><img src="/2019/04/09/hotfix/attach.png" alt></p><p><em>注:我当前的项目中未采取tinker推荐的自建simpleApplication，然后让主application集成它的方式，我是用的反射，官方比较推荐不使用反射的方式，但是我觉得反射挺好用，而且灵活性更高（具体原因是项目中需要动态修改包名，所以pass掉了第一种推荐方式）</em></p><h2 id="生成基准包"><a href="#生成基准包" class="headerlink" title="生成基准包"></a>生成基准包</h2><ul><li>之后，进行三方库的导入和编译，这时我们应该可以成功打包了。配置好多渠道后，直接gradle打相应的渠道包，生成基准包。<br><img src="/2019/04/09/hotfix/qudao.png" alt></li><li>同时注意，打基准包的时候需要在tinker-suppor.gradle文件中，定义好tinkerID，一般可以把基准包记为base-x-x</li><li>打包完毕后，生成的所有apk都在路径为app-build-bakApk,然后根据时间找到基准包目录，如下的release包即为正式包。<br><img src="/2019/04/09/hotfix/release.png" alt></li></ul><h2 id="上报联网"><a href="#上报联网" class="headerlink" title="上报联网"></a>上报联网</h2><p>把新打的apk，安装到手机上，必须进行一次网络请求，因为bugly需要网络才能和平台联系在一起。上报联网之后，控制台里就可以出现刚刚上传上去的版本了。如图<br><img src="/2019/04/09/hotfix/banben.png" alt></p><h2 id="生成补丁包"><a href="#生成补丁包" class="headerlink" title="生成补丁包"></a>生成补丁包</h2><p>修改代码吧，修改过后，还要在tinker-support.gradle文件中修改基准包路径，和TinkerID。最后打开gradle脚本，找到tinker-support，如图<br><img src="/2019/04/09/hotfix/tinker_support.png" alt><br>点击buildTinkerPatchXXXRelease,生成后的补丁包，到路径为app-build-outputs-patch,找到后缀为7zip的文件，即为补丁包。</p><h2 id="上传补丁包修复基准包"><a href="#上传补丁包修复基准包" class="headerlink" title="上传补丁包修复基准包"></a>上传补丁包修复基准包</h2><p>在bugly后台点击热更新，上传新补丁，上传过后会自动找到对应的基准包，如图所示<br><img src="/2019/04/09/hotfix/fabuxinbuding.png" alt><br><br>下图就是成功下发一个新补丁的样子，如图<br><img src="/2019/04/09/hotfix/success.png" alt></p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>tinker热更新就记录完了，其实看官网文档更加详细，只不过我是为了加深自己的印象，建议大家去官方文档进行查看。</p><p>OVER</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;集成bugly的tinker实现app的热更新&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="http://yoursite.com/2019/03/16/buy-phone/"/>
    <id>http://yoursite.com/2019/03/16/buy-phone/</id>
    <published>2019-03-16T02:51:57.000Z</published>
    <updated>2019-03-16T03:14:25.406Z</updated>
    
    <content type="html"><![CDATA[<p>才发现原来我是选择困难症<br><a id="more"></a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>说来惭愧，手里这台华为nova，应该是第一个陪我善终的手机了。这些年也没再丢过手机了，仔细想想应该是现在出去浪的机会少了，酒局少了..<br><br>这手机用了三年了，至今还记得这台nova入手时的感觉。nova1给我的感觉是那种外表看起来就很清秀，时间越长就越能发现她独有的美的感觉。<br><br>奈何，人老岁数大了，手脚不太灵活，手机咣咣往地上掉，再也不是上大学时候叱咤整个6楼的乐动达人小王子了。<br><br>摔得多了，主板也漏了，内存也摔没了,越来越卡了。那就只能再入手一台新手机了。</p><h2 id="纠结点"><a href="#纠结点" class="headerlink" title="纠结点"></a>纠结点</h2><ul><li>iOS</li><li>Anroid</li></ul><h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p>因为想打算入手一台mbp，所以在考虑到底还要不要买个iphone，凑个生态系统。仅此而已</p><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>首先我开发android，买个android应该无可厚非了。但是android的型号简直是太多了，国内厂商推出的新产品也是眼花缭乱，这里只考虑三个牌子吧，oppo，vivo实在是无感</p><ul><li>小米 （都说小米的生态做的不错，智能家居也确实很吸引我，智能助理小爱同学也很好很聪明）</li><li>华为 （用了好几年华为系统了，感觉很一般，没有智能助理，用的也腻了。PASS）</li><li>三星 （我堂堂中华儿女，要去买棒子的东西？？但是三星确实是android机皇，只可惜我没钱，棒子真几把傻逼！PASS）</li></ul><h2 id="内斗"><a href="#内斗" class="headerlink" title="内斗"></a>内斗</h2><ul><li>小米9</li><li>小米MIX3</li></ul><p>对不起，我是真的喜欢全面屏，实在受不了那些什么刘海屏啊，水滴屏啊，挖孔屏啊什么的，小米MIX3加分<br><br>拍照对我来说没啥刚需，算是平手<br><br>指纹和面部识别，MIX3没有屏下指纹，都是后置的，我觉得也还能接受。面部识别的话也挺鸡肋吧<br><br>总之，最吸引我的还是真正的全面屏，全面屏，全面屏。</p><h2 id="决定"><a href="#决定" class="headerlink" title="决定"></a>决定</h2><p>小米MIX3！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;才发现原来我是选择困难症&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="http://yoursite.com/2019/03/13/2019-3-13%E9%9A%8F%E7%AC%94/"/>
    <id>http://yoursite.com/2019/03/13/2019-3-13随笔/</id>
    <published>2019-03-13T09:14:57.000Z</published>
    <updated>2019-03-13T09:32:58.587Z</updated>
    
    <content type="html"><![CDATA[<p>2019-3-13有点想法<br><a id="more"></a></p><p>这几天遇上这么几个事儿感觉不太爽,拿小本记一下</p><h2 id="网易云"><a href="#网易云" class="headerlink" title="网易云"></a>网易云</h2><p>网易云他妈的我已经不想多评价了，每个月黑胶会员的钱供着，结果啥啥版权没有，啥歌都听不了。不爽的点就在这儿<br><br>你看不惯我，又离不开我那种感觉，从上大学就开始用网易云，里面每年收藏的歌单比我硬盘里老师们的电影多多了。<br><br>打个比方，网易云就好像你结了婚好几年的原配媳妇，每个月钱上供着，然后啥歌啥版权都没有，还不如隔壁那个叫QQ音乐<br><br>的小三,但是她依然是最懂你的。我个人认为网易云的私人电台比QQ音乐的要好很多 &gt;.&lt;</p><h2 id="微软-英特尔"><a href="#微软-英特尔" class="headerlink" title="微软 英特尔"></a>微软 英特尔</h2><p>win10系统怎么说呢，对于普通用户来讲真的颜值高，性能好。但是开发来讲的话其实他并没有win7兼容性那么好，对于很多软件<br><br>的支持也不够。此话怎讲呢，前两天捅咕了一下Docker，刚运行Docker，小鲸鱼就提示我需要开启Hyper-V，so那就开喽。后来就不说了<br><br>Docker玩差不多，就放在那了，也没管他。然后我又更新了一下studio的最新版本，升级了google的模拟器，传说中升级后1秒启动的模拟器<br><br>不巧的是，还得安装HAXM。HAXM是英特尔的虚拟化技术，Hyper-V是微软的虚拟化技术。我万万没想到，开启模拟器的一瞬间竟然死机了。<br><br>所以启动了Docker就不能用模拟器。。。服了</p><h2 id="自走棋"><a href="#自走棋" class="headerlink" title="自走棋"></a>自走棋</h2><p>段位到主教2了，我挺开心的。但是总感觉失去了游戏的乐趣，每天小心翼翼的守护着那点分儿，唉</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019-3-13有点想法&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>捅咕gitlab的一天</title>
    <link href="http://yoursite.com/2019/03/12/gitlab/"/>
    <id>http://yoursite.com/2019/03/12/gitlab/</id>
    <published>2019-03-12T07:44:57.000Z</published>
    <updated>2019-03-12T07:33:10.330Z</updated>
    
    <content type="html"><![CDATA[<p>记录我搭建命运多舛的gitlab<br><a id="more"></a></p><blockquote><p>开头感谢羊崽提供阿里云ECS</p></blockquote><h2 id="在阿里云上搭建gitlab"><a href="#在阿里云上搭建gitlab" class="headerlink" title="在阿里云上搭建gitlab"></a>在阿里云上搭建gitlab</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><ul><li>阿里云ECS服务器</li><li>gitlab镜像包</li><li>xShell6</li><li>Windows 10操作系统</li></ul><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>根据羊崽提供的阿里云，用xShell6连接到阿里云服务器，步骤如下：</p><ul><li>填写公网ip（可到阿里云控制台查看）</li><li>输入用户名，密码（如下组图）</li></ul><p><img src="/2019/03/12/gitlab/xshell1.png" alt><br><img src="/2019/03/12/gitlab/xshell2.png" alt><br><img src="/2019/03/12/gitlab/xshell3.png" alt><br><img src="/2019/03/12/gitlab/xshell4.png" alt></p><h3 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h3><p>自动部署不太知道，阿里云后台有卖gitlab集成环境的，估计就是传说中的一键傻瓜式，这里就不考虑了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">购买地址：https://market.aliyun.com/products/55530001/jxsc000067.html?spm=a2c4g.11186623.2.12.503b6311asATsa</span><br></pre></td></tr></table></figure><h3 id="手动部署"><a href="#手动部署" class="headerlink" title="手动部署"></a>手动部署</h3><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y curl policycoreutils-python openssh-server</span><br></pre></td></tr></table></figure><h4 id="设置SSH开机自启动并启动SSH服务"><a href="#设置SSH开机自启动并启动SSH服务" class="headerlink" title="设置SSH开机自启动并启动SSH服务"></a>设置SSH开机自启动并启动SSH服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable sshd</span><br><span class="line">sudo systemctl start sshd</span><br></pre></td></tr></table></figure><h4 id="安装Postfix来发送通知邮件"><a href="#安装Postfix来发送通知邮件" class="headerlink" title="安装Postfix来发送通知邮件"></a>安装Postfix来发送通知邮件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install postfix</span><br></pre></td></tr></table></figure><h4 id="设置Postfix开机自启动"><a href="#设置Postfix开机自启动" class="headerlink" title="设置Postfix开机自启动"></a>设置Postfix开机自启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable postfix</span><br></pre></td></tr></table></figure><h4 id="启动Postfix服务"><a href="#启动Postfix服务" class="headerlink" title="启动Postfix服务"></a>启动Postfix服务</h4><ul><li>输入命令vim /etc/postfix/main.cf打开main.cf文件并找到下图内容<br><img src="/2019/03/12/gitlab/vim1.png" alt></li><li>将这行代码改为inet_interfaces = all，然后按Esc键，然后输入:wq并回车以保存并关闭main.cf文件</li><li>输入命令sudo systemctl start postfix启动Postfix服务</li></ul><h4 id="添加GitLab软件包仓库"><a href="#添加GitLab软件包仓库" class="headerlink" title="添加GitLab软件包仓库"></a>添加GitLab软件包仓库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure><h4 id="安装GitLab"><a href="#安装GitLab" class="headerlink" title="安装GitLab"></a>安装GitLab</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo EXTERNAL_URL=&quot;GitLab服务器的公网IP地址&quot; yum install -y gitlab-ce</span><br></pre></td></tr></table></figure><h3 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h3><p>很可惜，我失败了，报错502，在网上一顿找解决办法，发现是因为云主机的内存和cpu太小导致的（无语），但还是很感谢羊崽提供软件支持。来张图记录一下<br><img src="/2019/03/12/gitlab/online.png" alt></p><p><strong>既然羊崽的服务器是因为内存和cpu导致无法搭建，那我用我自己电脑在本地搭一个不就行了，虽然无法像服务器那样24小时工作，但是进行学习还是可以的</strong></p><h2 id="本地搭建gitlab"><a href="#本地搭建gitlab" class="headerlink" title="本地搭建gitlab"></a>本地搭建gitlab</h2><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>安装docker的过程就不赘述了，而且docker的运行需要系统开启 Hyper-v,具体开启方法请自行google</p><h3 id="Docker安装完毕"><a href="#Docker安装完毕" class="headerlink" title="Docker安装完毕"></a>Docker安装完毕</h3><h4 id="拉去gitlab镜像"><a href="#拉去gitlab镜像" class="headerlink" title="拉去gitlab镜像"></a>拉去gitlab镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce</span><br></pre></td></tr></table></figure><blockquote><p>如果拉去速度慢，可以翻墙或者挂加速器或者换镜像源，反正都有办法解决</p></blockquote><h4 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach \</span><br><span class="line">    --hostname localhost \</span><br><span class="line">    --publish 444:443 --publish 8880:80 --publish 2222:22 \</span><br><span class="line">    --name gitlab \</span><br><span class="line">    --restart always \</span><br><span class="line">    gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><blockquote><p>我这里做了三个端口映射，hostname也可以自己配置</p></blockquote><h4 id="成功启动"><a href="#成功启动" class="headerlink" title="成功启动"></a>成功启动</h4><p>成功启动之后，docker ps可以查看当前容器的状态，如下图<br><img src="/2019/03/12/gitlab/gitlab1.png" alt></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>输入localhost:8880，激动地画面出现了，首次登陆的用户名密码是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Username: root</span><br><span class="line">Password: 5iveL!fe</span><br></pre></td></tr></table></figure></p><p><img src="/2019/03/12/gitlab/gitlab2.png" alt></p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>之后的配置就和github差不多了，得改ssh key什么之类的，好了，今天就记录到这里。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录我搭建命运多舛的gitlab&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="gitlab" scheme="http://yoursite.com/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView设计通用Adapter</title>
    <link href="http://yoursite.com/2019/01/21/recycleview-adapter/"/>
    <id>http://yoursite.com/2019/01/21/recycleview-adapter/</id>
    <published>2019-01-21T02:11:57.000Z</published>
    <updated>2019-03-11T08:46:50.941Z</updated>
    
    <content type="html"><![CDATA[<p>打造一个属于自己的通用Adapter<br><a id="more"></a></p><p><strong>前言</strong></p><blockquote><p>目前的项目开发来看，列表依旧是整个APP内最主要的控件，而说到列表就会想到ListView,但ListView不仅优化不好，而且已经被新版Api中RecycleView所取代。所以今天来用RecycleView来设计Adapter的使用。</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="引入RecycleView"><a href="#引入RecycleView" class="headerlink" title="引入RecycleView"></a>引入RecycleView</h3><p>如果我们想在项目中引用RecycleView，那我们首先得先添加V7包中的RecycleView，方法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &apos;com.android.support:recyclerview-v7:28.0.0&apos;</span><br></pre></td></tr></table></figure></p><h3 id="创建一个Bean类"><a href="#创建一个Bean类" class="headerlink" title="创建一个Bean类"></a>创建一个Bean类</h3><p>因为这个Demo中，需要一个Bean来存储数据，先把这些琐碎的工作做完，才好更好的开展。结构很简单，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class Data &#123;</span><br><span class="line">    private String title;</span><br><span class="line">    private String content;</span><br><span class="line"></span><br><span class="line">    public Data(String title, String content) &#123;</span><br><span class="line">        this.title = title;</span><br><span class="line">        this.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getTitle() &#123;</span><br><span class="line">        return title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTitle(String title) &#123;</span><br><span class="line">        this.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getContent() &#123;</span><br><span class="line">        return content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setContent(String content) &#123;</span><br><span class="line">        this.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><p>因为这个Demo中，我需要在整个项目中使用数据源，所以把数据源写到Application中吧，省着在主要代码中来上一段ArrayList的初始化赋值，有点违和。</p><p><img src="/2019/01/21/recycleview-adapter/datalist.png" alt></p><h3 id="定义条目布局"><a href="#定义条目布局" class="headerlink" title="定义条目布局"></a>定义条目布局</h3><p><img src="/2019/01/21/recycleview-adapter/item_list.png" alt></p><h2 id="先来写老方式的Adapter"><a href="#先来写老方式的Adapter" class="headerlink" title="先来写老方式的Adapter"></a>先来写老方式的Adapter</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class OldAdapter extends RecyclerView.Adapter&lt;OldAdapter.MyViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private List&lt;Data&gt; dataList;</span><br><span class="line">    private LayoutInflater layoutInflater;</span><br><span class="line"></span><br><span class="line">    OldAdapter(Context context, List&lt;Data&gt; dataList) &#123;</span><br><span class="line">        this.dataList = dataList;</span><br><span class="line">        this.layoutInflater = LayoutInflater.from(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @NonNull</span><br><span class="line">    @Override</span><br><span class="line">    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) &#123;</span><br><span class="line">        View inflate = layoutInflater.inflate(R.layout.item_list, viewGroup, false);</span><br><span class="line">        return new MyViewHolder(inflate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onBindViewHolder(@NonNull MyViewHolder myViewHolder, int i) &#123;</span><br><span class="line">        myViewHolder.tvTitle.setText(dataList.get(i).getTitle());</span><br><span class="line">        myViewHolder.tvContent.setText(dataList.get(i).getContent());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getItemCount() &#123;</span><br><span class="line">        return dataList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class MyViewHolder extends RecyclerView.ViewHolder &#123;</span><br><span class="line"></span><br><span class="line">        private TextView tvTitle;</span><br><span class="line">        private TextView tvContent;</span><br><span class="line"></span><br><span class="line">        MyViewHolder(View itemView) &#123;</span><br><span class="line">            super(itemView);</span><br><span class="line">            tvTitle = itemView.findViewById(R.id.tv_title);</span><br><span class="line">            tvContent = itemView.findViewById(R.id.tv_content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现思路：先定义一个ViewHolder用来做页面的缓存，由于我这个Item布局定义的很简单，所以同理，都是在ViewHolder中find到控件的id，然后初始化。最后在onBindViewHolder()中进行控件和数据的绑定。</p></blockquote><h2 id="最后在MainActivity中，绑定Adapter"><a href="#最后在MainActivity中，绑定Adapter" class="headerlink" title="最后在MainActivity中，绑定Adapter"></a>最后在MainActivity中，绑定Adapter</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        RecyclerView recyclerView = findViewById(R.id.recycle_view);</span><br><span class="line">        recyclerView.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false));</span><br><span class="line"></span><br><span class="line">        OldAdapter oldAdapter = new OldAdapter(this, App.dataList);</span><br><span class="line">        recyclerView.setAdapter(oldAdapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>呈现的效果的话就很简单了，能显示出列表就ok了<br><img src="/2019/01/21/recycleview-adapter/final1.png" alt></p><blockquote><p>ok,现在回归主题，设计一个通用的Adapter来进行数据的显示</p></blockquote><h2 id="先设计一个通用的，实用性高的ViewHolder"><a href="#先设计一个通用的，实用性高的ViewHolder" class="headerlink" title="先设计一个通用的，实用性高的ViewHolder"></a>先设计一个通用的，实用性高的ViewHolder</h2><blockquote><p>其实仔细想，列表中的条目，无非是Textview和ImageView，好像百分之80的条目都是这样，毕竟空间小，也没地方放那么多控件，所以就在ViewHolder里写上TextView和ImageView的复用方法吧。下面有几个关键点</p></blockquote><h3 id="SparseArray"><a href="#SparseArray" class="headerlink" title="SparseArray"></a>SparseArray</h3><p>使用 SparseArray 来存放 View 以减少 findViewById 的次数，SparseArray 比 HashMap 更省内存，在某些条件下性能会更好，不过只能存储 key 为 int 类型的数据，正好用来存放资源ID。</p><h3 id="getView方法"><a href="#getView方法" class="headerlink" title="getView方法"></a>getView方法</h3><p>先从缓存中找，找打的话则直接返回,如果找不到则 findViewById ，再把结果存入缓存中。实现复用<br><img src="/2019/01/21/recycleview-adapter/getView.png" alt></p><h3 id="onItemCommonClickListener"><a href="#onItemCommonClickListener" class="headerlink" title="onItemCommonClickListener"></a>onItemCommonClickListener</h3><p>其中还定义了一个可扩展的接口，其中定义了两个示例方法。如下<br><img src="/2019/01/21/recycleview-adapter/intetface.png" alt></p><h3 id="TextView和ImageView的扩展方法"><a href="#TextView和ImageView的扩展方法" class="headerlink" title="TextView和ImageView的扩展方法"></a>TextView和ImageView的扩展方法</h3><p>由于上面分析了，条目中一般都用到TextView和ImageView，所以定义几个最常用的方法，以后还可以自己添加<br><img src="/2019/01/21/recycleview-adapter/setfangfa.png" alt></p><p>整体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">public class CommonViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener, View.OnLongClickListener &#123;</span><br><span class="line"></span><br><span class="line">    private SparseArray&lt;View&gt; viewSparseArray;</span><br><span class="line"></span><br><span class="line">    private onItemCommonClickListener commonClickListener;</span><br><span class="line"></span><br><span class="line">    public CommonViewHolder(@NonNull View itemView) &#123;</span><br><span class="line">        super(itemView);</span><br><span class="line">        itemView.setOnClickListener(this);</span><br><span class="line">        itemView.setOnLongClickListener(this);</span><br><span class="line">        viewSparseArray = new SparseArray&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 先从缓存中找，找打的话则直接返回,如果找不到则 findViewById ，再把结果存入缓存中</span><br><span class="line">     */</span><br><span class="line">    public &lt;T extends View&gt; T getView(int viewId) &#123;</span><br><span class="line">        View view = viewSparseArray.get(viewId);</span><br><span class="line">        if (view == null) &#123;</span><br><span class="line">            view = itemView.findViewById(viewId);</span><br><span class="line">            viewSparseArray.put(viewId, view);</span><br><span class="line">        &#125;</span><br><span class="line">        return (T) view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置textview内容</span><br><span class="line">     */</span><br><span class="line">    public CommonViewHolder setText(int viewId, CharSequence text) &#123;</span><br><span class="line">        TextView tv = getView(viewId);</span><br><span class="line">        tv.setText(text);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置是否可见</span><br><span class="line">     */</span><br><span class="line">    public CommonViewHolder setViewVisibility(int viewId, int visibility) &#123;</span><br><span class="line">        getView(viewId).setVisibility(visibility);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置图片资源</span><br><span class="line">     */</span><br><span class="line">    public CommonViewHolder setImageResource(int viewId, int resourceId) &#123;</span><br><span class="line">        ImageView imageView = getView(viewId);</span><br><span class="line">        imageView.setImageResource(resourceId);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected interface onItemCommonClickListener &#123;</span><br><span class="line">        void onItemClickListener(int position);</span><br><span class="line"></span><br><span class="line">        void onItemLongClickListener(int position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCommonClickListener(onItemCommonClickListener commonClickListener) &#123;</span><br><span class="line">        this.commonClickListener = commonClickListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View view) &#123;</span><br><span class="line">        if (commonClickListener != null) &#123;</span><br><span class="line">            commonClickListener.onItemLongClickListener(getAdapterPosition());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onLongClick(View view) &#123;</span><br><span class="line">        if (commonClickListener != null) &#123;</span><br><span class="line">            commonClickListener.onItemClickListener(getAdapterPosition());</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="设计通用的RecycleAdapter"><a href="#设计通用的RecycleAdapter" class="headerlink" title="设计通用的RecycleAdapter"></a>设计通用的RecycleAdapter</h2><p>再来实现一个通用的 RecyclerView.Adapter<br>因为不知道要使用到的数据类型是哪一种，也为了更好的适配各种数据类型，所以这里需要用到泛型<br>当中，onBindViewHolder(CommonViewHolder holder, int position)  需要我们自己来操作，所以这里再来声明一个抽象方法 bindData(CommonViewHolder holder, T data) ，由子类来负责实现绑定操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">abstract class BaseCommonRecycleViewAdapter&lt;T&gt; extends RecyclerView.Adapter&lt;CommonViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private LayoutInflater layoutInflater;</span><br><span class="line">    private List&lt;T&gt; dataList;</span><br><span class="line">    private int layoutId;</span><br><span class="line"></span><br><span class="line">    BaseCommonRecycleViewAdapter(Context context, List&lt;T&gt; dataList, int layoutId) &#123;</span><br><span class="line">        layoutInflater = LayoutInflater.from(context);</span><br><span class="line">        this.dataList = dataList;</span><br><span class="line">        this.layoutId = layoutId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getItemViewType(int position) &#123;</span><br><span class="line">        return super.getItemViewType(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @NonNull</span><br><span class="line">    @Override</span><br><span class="line">    public CommonViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) &#123;</span><br><span class="line">        View inflate = layoutInflater.inflate(layoutId, viewGroup, false);</span><br><span class="line">        return new CommonViewHolder(inflate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onBindViewHolder(@NonNull CommonViewHolder commonViewHolder, int i) &#123;</span><br><span class="line">        bindData(commonViewHolder, dataList.get(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getItemCount() &#123;</span><br><span class="line">        return dataList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    abstract void bindData(CommonViewHolder holder, T data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>大体思路就是把平时老写法的Adapter抽象一层，具体的onCreateViewHolder和onBindViewHolder都在这里进行，才可以减少重复，实现复用。</li><li>定义了一个bindData的抽象方法，需要在使用过程中进行数据绑定的重写</li></ul><h2 id="如何使用编写好的通用Adapter？"><a href="#如何使用编写好的通用Adapter？" class="headerlink" title="如何使用编写好的通用Adapter？"></a>如何使用编写好的通用Adapter？</h2><p>重载两个构造方法，一个实现回调自定义接口，另一个不实现，提高扩展性。如下<br><img src="/2019/01/21/recycleview-adapter/newadapter.png" alt></p><p>最后在主页面,就完成了adapter的调用<br><img src="/2019/01/21/recycleview-adapter/final2.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打造一个属于自己的通用Adapter&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="Material Design" scheme="http://yoursite.com/categories/Java/Material-Design/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>学习Kotlin第三篇</title>
    <link href="http://yoursite.com/2019/01/18/learn-kotlin-3/"/>
    <id>http://yoursite.com/2019/01/18/learn-kotlin-3/</id>
    <published>2019-01-18T02:00:57.000Z</published>
    <updated>2019-03-11T08:47:33.453Z</updated>
    
    <content type="html"><![CDATA[<p>看Android_Socket_Demo中，不懂点的记录，具体代码请参考 <a href="https://github.com/zhaoxuning233/Android_Socket_Demo" target="_blank" rel="noopener">https://github.com/zhaoxuning233/Android_Socket_Demo</a><br><a id="more"></a></p><h2 id="companion-object"><a href="#companion-object" class="headerlink" title="companion object"></a>companion object</h2><p>companion object 修饰为伴生对象,伴生对象在类中只能存在一个，类似于java中的静态方法 Java 中使用类访问静态成员，静态方法。</p><p>《未完继续补充》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看Android_Socket_Demo中，不懂点的记录，具体代码请参考 &lt;a href=&quot;https://github.com/zhaoxuning233/Android_Socket_Demo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/zhaoxuning233/Android_Socket_Demo&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://yoursite.com/categories/Kotlin/"/>
    
      <category term="Material Design" scheme="http://yoursite.com/categories/Kotlin/Material-Design/"/>
    
    
      <category term="Kotlin" scheme="http://yoursite.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>My Name is MotherBoard</title>
    <link href="http://yoursite.com/2019/01/17/what-is-motherboard/"/>
    <id>http://yoursite.com/2019/01/17/what-is-motherboard/</id>
    <published>2019-01-17T07:46:57.000Z</published>
    <updated>2019-03-11T08:49:19.382Z</updated>
    
    <content type="html"><![CDATA[<p>主板知识扫盲<br><a id="more"></a></p><h2 id="主板重点概念："><a href="#主板重点概念：" class="headerlink" title="主板重点概念："></a>主板重点概念：</h2><ul><li>芯片组</li><li>接口类型<br><img src="/2019/01/17/what-is-motherboard/zhuban1.png" alt></li></ul><h3 id="芯片组是什么？"><a href="#芯片组是什么？" class="headerlink" title="芯片组是什么？"></a>芯片组是什么？</h3><p>芯片组是主板的核心芯片，选对芯片组，主板才能和cpu兼容。（注意下图：H310，B360，H370都是不能超频的主板，只有z开头的主板才支持超频）<br><img src="/2019/01/17/what-is-motherboard/zhuban2.png" alt><br><img src="/2019/01/17/what-is-motherboard/zhuban3.png" alt></p><h3 id="主板类型"><a href="#主板类型" class="headerlink" title="主板类型"></a>主板类型</h3><ul><li>大板</li><li>小板</li><li>迷你板<br><img src="/2019/01/17/what-is-motherboard/zhuban4.png" alt></li></ul><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>买主板最重要的是芯片组，要根据cpu的类型选择合适的芯片组。</li><li>大板小板性能几乎没有差距，有扩展需求的买大板，想省点钱没有扩展需求的可以买小板。</li><li>不管大板小板，优先选择有4根内存插槽的主板</li><li>喜欢RGB炫彩灯光的，要选择有5V3针脚的可编程的RGB主板</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主板知识扫盲&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="硬件" scheme="http://yoursite.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
      <category term="硬件" scheme="http://yoursite.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>My Name is Monitor</title>
    <link href="http://yoursite.com/2019/01/17/what-is-monitor/"/>
    <id>http://yoursite.com/2019/01/17/what-is-monitor/</id>
    <published>2019-01-17T07:44:57.000Z</published>
    <updated>2019-03-11T09:09:03.992Z</updated>
    
    <content type="html"><![CDATA[<p>显示器知识扫盲<br><a id="more"></a></p><h2 id="显示器的重要参数"><a href="#显示器的重要参数" class="headerlink" title="显示器的重要参数"></a>显示器的重要参数</h2><ul><li>色域</li><li>色差</li><li>分辨率和尺寸</li></ul><h2 id="色域"><a href="#色域" class="headerlink" title="色域"></a>色域</h2><p>概念：显示器能显示的色彩的范围。常见的色域表示方法有两种，sRGB色域和NTSC色域，72%NTSC 约等于 100%sRGB<br><img src="/2019/01/17/what-is-monitor/xianshiqi1.png" alt></p><h2 id="色差"><a href="#色差" class="headerlink" title="色差"></a>色差</h2><p>概念：表示颜色表示的准确不准确，以deltaE为单位。对于设计师来说，delataE值要小于3，才算合格的显示器</p><pre><code>- delataE &gt; 6时，人眼能明显区分出显示的颜色和标准颜色的区别- 3&lt; delataE &lt;6 时，经过专业训练的人能分辨出显示的颜色和标准颜色的区别- 1&lt; delataE &lt;3 时，人眼已经难以区分显示的颜色和标准颜色的区别了- delataE &lt; 1 时，人眼基本无法分辨显示的颜色和标准颜色的区别</code></pre><h2 id="分辨率和尺寸"><a href="#分辨率和尺寸" class="headerlink" title="分辨率和尺寸"></a>分辨率和尺寸</h2><p>概念：分辨率表示画面显示精细不精细。<br><img src="/2019/01/17/what-is-monitor/xianshiqi2.png" alt></p><h2 id="刷新率和响应时间"><a href="#刷新率和响应时间" class="headerlink" title="刷新率和响应时间"></a>刷新率和响应时间</h2><p>刷新率：表示显示器每秒能播放多少图片。</p><blockquote><p>如果显卡每秒能画出120张图片（所说的120帧），而显示器的刷新率是60hz，那么显示器只能显示第1，3，5，7，9….119张图片，所以显示屏的刷新率越高，所表现出的画面就更加流畅。</p></blockquote><h2 id="液晶面板的选择"><a href="#液晶面板的选择" class="headerlink" title="液晶面板的选择"></a>液晶面板的选择</h2><p><img src="/2019/01/17/what-is-monitor/xianshiqi3.png" alt></p><ul><li>目前市场上由于电竞的火热，TN屏由于价格低响应快，大多数所用来制作144hz刷新率的显示器。（TN屏快被淘汰，高刷新率显示器救活了他）</li><li>由于VA屏保证了画面的质量，所以响应时间很慢，多为7到14ms的响应时间，但商家标注的参数可能是3ms甚至是1ms，那是商家使用了一种背光闪烁技术让响应时间看起来很低。所以玩FPS设计类游戏不要买VA屏。</li></ul><h2 id="带鱼屏"><a href="#带鱼屏" class="headerlink" title="带鱼屏"></a>带鱼屏</h2><p>普通显示屏的比例是16：9，而带鱼屏则是21：9或更长的显示屏，21：9是大多数电影的比例，所以带鱼屏看电影很爽。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>家用影音不要买TN屏，因为色彩会比较差，建议买IPS或VA屏，色彩更丰富。</li><li>主玩FPS射击类游戏的人不要买VA屏，建议买144Hz的TN屏或者144Hz的IPS屏。</li><li>设计和修图的人尽量买100%sRGB色域，色差小于3的显示屏。色域过高（130%sRGB或120%NTSC）容易导致偏色。</li><li>带鱼屏适合多窗口，多任务的显示，很适合看电影和玩单机大作。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;显示器知识扫盲&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="硬件" scheme="http://yoursite.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
      <category term="硬件" scheme="http://yoursite.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>My Name is CPU</title>
    <link href="http://yoursite.com/2019/01/17/what-is-cpu/"/>
    <id>http://yoursite.com/2019/01/17/what-is-cpu/</id>
    <published>2019-01-17T06:58:57.000Z</published>
    <updated>2019-03-12T07:40:31.586Z</updated>
    
    <content type="html"><![CDATA[<p>CPU知识扫盲<br><a id="more"></a></p><h2 id="CPU四大概念"><a href="#CPU四大概念" class="headerlink" title="CPU四大概念"></a>CPU四大概念</h2><ul><li>架构</li><li>核心</li><li>频率</li><li>缓存</li></ul><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>cpu的整体框架。越新型的cpu，架构越新。比方说搬砖，老架构的cpu仿佛小推车，新架构的cpu就像大卡车</p><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><p>cpu进行数据运算的东西。目前市面上有什么双核，4核，8核等。cpu的一个核心有一个线程，可以同时完成一个任务，但是自从有了超线程技术，一个核心可以有两个线程，同时完成两个任务。（线程数 = 2*核心数）</p><h3 id="频率"><a href="#频率" class="headerlink" title="频率"></a>频率</h3><p>cpu的运算速度。频率越高，运算速度越快。分为：基频，睿频，超频</p><ul><li>基频（主频）：cpu的基本频率。好比一个人轻松自在的散步时的走路速度。</li><li>睿频：cpu高负载，火力全开时的频率。好比一个人开始跑步时的速度。</li><li>超频：cpu极限性能时的频率。百米冲刺的速度了。</li></ul><blockquote><p>英特尔I3不支持睿频，I5，I7，I9支持睿频，英特尔后缀带K，X的都是支持超频的，AMD的锐龙系列全部支持超频</p></blockquote><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>读写速度超快的内存<br><img src="/2019/01/17/what-is-cpu/cpu1.png" alt></p><h3 id="办公"><a href="#办公" class="headerlink" title="办公"></a>办公</h3><p>买自带核显的cpu更好，便宜实惠。<br>推荐：英特尔奔腾G5400，I3-8100，AMD锐龙3 2200G（推荐，自带的核显甚至高于一些独显）</p><h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p>买频率高的，打游戏对于核心数没太大需求。<br>推荐：AMD锐龙5 2400G，I5-8600，I7-8700K，AMD锐龙5 2600X</p><h3 id="设计渲染"><a href="#设计渲染" class="headerlink" title="设计渲染"></a>设计渲染</h3><p>买多核心多线程的CPU。</p><h3 id="常见cpu参数"><a href="#常见cpu参数" class="headerlink" title="常见cpu参数"></a>常见cpu参数</h3><p><img src="/2019/01/17/what-is-cpu/cpu2.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>CPU买新不买旧</li><li>家用办公买自带核芯显卡的CPU</li><li>打游戏买频率高的CPU</li><li>设计渲染买多核多线程的CPU</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CPU知识扫盲&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="硬件" scheme="http://yoursite.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
      <category term="硬件" scheme="http://yoursite.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>My Name is Graphics</title>
    <link href="http://yoursite.com/2019/01/17/what-is-graphics/"/>
    <id>http://yoursite.com/2019/01/17/what-is-graphics/</id>
    <published>2019-01-17T06:58:57.000Z</published>
    <updated>2019-03-11T08:48:38.359Z</updated>
    
    <content type="html"><![CDATA[<p>显卡知识扫盲<br><a id="more"></a></p><h2 id="显卡的关键参数"><a href="#显卡的关键参数" class="headerlink" title="显卡的关键参数"></a>显卡的关键参数</h2><ul><li>流处理器的数量</li><li>显卡的架构</li><li>显卡的核心频率</li><li>显存容量/位宽/频率</li></ul><h3 id="流处理器？"><a href="#流处理器？" class="headerlink" title="流处理器？"></a>流处理器？</h3><p>流处理器（CUDA核心）就是显卡画画的地方，可以理解为显卡里的画师。流处理器越多，每秒画出的图片也就越多。越好的显卡其中的流处理器也越多。</p><h3 id="显卡的架构？"><a href="#显卡的架构？" class="headerlink" title="显卡的架构？"></a>显卡的架构？</h3><p>例如：GTX960 虽然有1024个流处理器，但是是采用老一代的麦克斯架构。GTX1050ti 虽然只有768个流处理器，但是确实采用新一代的帕斯卡架构。<br>所以GTX1050ti要比GTX960要好。（现在已经出到20系列显卡，采用图灵架构）<br>新架构的显卡效率更高，性能也更强。</p><h3 id="显卡的核心频率"><a href="#显卡的核心频率" class="headerlink" title="显卡的核心频率"></a>显卡的核心频率</h3><p>流处理器“画画”的速度。在架构和流处理器一致时，频率越快，显卡效率越高性能越好。可以通过显卡超频来强行提升这个频率。</p><h3 id="显存容量-位宽-频率"><a href="#显存容量-位宽-频率" class="headerlink" title="显存容量/位宽/频率"></a>显存容量/位宽/频率</h3><p>位宽表示显卡每秒能运送多少位的“货物”到显存。显存频率代表每秒从显卡到显存运输的次数。显存容量就是存储空间的大小。</p><p><img src="/2019/01/17/what-is-graphics/xianka1.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;显卡知识扫盲&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="硬件" scheme="http://yoursite.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
      <category term="硬件" scheme="http://yoursite.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>My Name is RAM</title>
    <link href="http://yoursite.com/2019/01/17/what-is-ram/"/>
    <id>http://yoursite.com/2019/01/17/what-is-ram/</id>
    <published>2019-01-17T06:58:57.000Z</published>
    <updated>2019-03-11T08:50:12.347Z</updated>
    
    <content type="html"><![CDATA[<p>内存知识扫盲<br><a id="more"></a></p><h2 id="内存是什么"><a href="#内存是什么" class="headerlink" title="内存是什么"></a>内存是什么</h2><p>内存是CPU和硬盘间的中转站。</p><h2 id="内存的重要概念"><a href="#内存的重要概念" class="headerlink" title="内存的重要概念"></a>内存的重要概念</h2><p>A.容量 B.速度</p><h3 id="内存的容量？"><a href="#内存的容量？" class="headerlink" title="内存的容量？"></a>内存的容量？</h3><p>内存的容量不够，cpu在进行程序的运行，或者玩游戏时，cpu就不能痛快的和内存进行数据交换。</p><h3 id="内存条的速度？"><a href="#内存条的速度？" class="headerlink" title="内存条的速度？"></a>内存条的速度？</h3><p>内存条的速度是由频率决定的。内存条本身没有频率，市面上一些广告中写的内存频率，是cpu对内存条访问的频率。</p><h3 id="内存条的颗粒"><a href="#内存条的颗粒" class="headerlink" title="内存条的颗粒"></a>内存条的颗粒</h3><p>内存条的颗粒体质越好，可承受的cpu访问频率也就越快。体质普通的内存颗粒，每秒能承受2400Mhz的访问频率。所以内存条上标注出的频率，是内存厂家保证的内存颗粒可承受的访问频率。生产主板的厂家为了保证内存稳定工作，一般把内存的访问频率默认设置为2133或2400Mhz，买了高频内存条的需要到BIOS中手动设置访问频率。<br><img src="/2019/01/17/what-is-ram/ram1.png" alt><br><img src="/2019/01/17/what-is-ram/ram2.png" alt></p><h3 id="高频内存条有作用吗？"><a href="#高频内存条有作用吗？" class="headerlink" title="高频内存条有作用吗？"></a>高频内存条有作用吗？</h3><p>高频内存条确实比普通内存条要快的多，但还是无法相比双通道内存组。而且在挑选高频内存条之前，要看自己的主板支不支持高频内存条（需要查看内存标准参数）</p><h3 id="如何组成双通道？"><a href="#如何组成双通道？" class="headerlink" title="如何组成双通道？"></a>如何组成双通道？</h3><p><img src="/2019/01/17/what-is-ram/ram3.png" alt></p><h3 id="时序"><a href="#时序" class="headerlink" title="时序"></a>时序</h3><p>时序表示数据的延迟。单位纳秒。如果一个内存条频率是2400Mhz，那么cpu在进行了2400Mhz次数据交换之后，把这2400Mhz次的延迟全部加起来，得到的总延迟就是时序。所以随着内存条频率的增加，时序也不可避免的增大。同等访问频率的情况下，时序越小代表颗粒的体质越好，超频的潜力就越大。</p><h3 id="内存的延迟可以用以下公式计算："><a href="#内存的延迟可以用以下公式计算：" class="headerlink" title="内存的延迟可以用以下公式计算："></a>内存的延迟可以用以下公式计算：</h3><p><img src="/2019/01/17/what-is-ram/ram4.png" alt></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>内存条的容量最重要，要优先满足容量的需求</li><li>双通道内存有这两倍的内存性能的提升，玩游戏的话建议组成双通道内存组</li><li>普通频率的内存条组成双通道后性能已经很强了，满足绝大多数人的需求</li><li>如果不打算给超频的话，内存厂家间并没有太大差别，内存都是终身质保的</li><li>高频内存可以解决游戏掉帧的情况，但不会明显提升游戏帧数，而且高频内存对主板要求较高，而且还要会超频。</li><li>如果想体验超频在频率相同的情况下，时序越小，超频潜质也就越好</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内存知识扫盲&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="硬件" scheme="http://yoursite.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
      <category term="硬件" scheme="http://yoursite.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>My Name is Power</title>
    <link href="http://yoursite.com/2019/01/17/what-is-power_source/"/>
    <id>http://yoursite.com/2019/01/17/what-is-power_source/</id>
    <published>2019-01-17T06:38:57.000Z</published>
    <updated>2019-03-11T08:51:35.343Z</updated>
    
    <content type="html"><![CDATA[<p>电源知识扫盲<br><a id="more"></a></p><h2 id="电源"><a href="#电源" class="headerlink" title="电源"></a>电源</h2><p>电源是电脑的心脏，负责提供稳定的电压，过高或过低的电源都会影响硬件的寿命 —-鲁迅</p><blockquote><p>Question 1:多大的功率电源合适？怎么挑选？</p></blockquote><p>cpu和显卡是电脑中功耗最高的两个部件，其余再加上100w左右的功率就差不多了。</p><p><img src="/2019/01/17/what-is-power_source/power1.png" alt></p><blockquote><p>Question 2:购买电源可以参考的数据指标?</p></blockquote><p>80PLUS认证。<br>分为：白牌，铜牌，银牌，金牌，白金牌,如下图<br><img src="/2019/01/17/what-is-power_source/power2.png" alt></p><h2 id="电源目前最流行的结构"><a href="#电源目前最流行的结构" class="headerlink" title="电源目前最流行的结构"></a>电源目前最流行的结构</h2><p>主流的电源方案都是主动式PFC+LLC半桥+DC-DC的结构</p><h2 id="电源的模组和尺寸"><a href="#电源的模组和尺寸" class="headerlink" title="电源的模组和尺寸"></a>电源的模组和尺寸</h2><ul><li>模组：非模组，半模组，全模组</li><li>尺寸：ATX（主流），SFX</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>不要买山寨或者十分廉价的电源</li><li>高配置电脑可以遵循1元1瓦的标准购买电源</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;电源知识扫盲&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="硬件" scheme="http://yoursite.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
      <category term="硬件" scheme="http://yoursite.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>学习Kotlin第二篇</title>
    <link href="http://yoursite.com/2019/01/16/learn-kotlin-2/"/>
    <id>http://yoursite.com/2019/01/16/learn-kotlin-2/</id>
    <published>2019-01-16T00:38:57.000Z</published>
    <updated>2019-01-17T06:25:06.269Z</updated>
    
    <content type="html"><![CDATA[<p>记录学习路上的点滴<br><a id="more"></a></p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p>今天突发奇想，想用Kotlin结合Material Design实现出tab切换的效果，效果如下</p><div style="float:left;border:solid 1px 000;margin:2px;"><img src="https://raw.githubusercontent.com/zhaoxuning233/zhaoxuning233.github.io/master/2019/01/16/learn-kotlin-2/bottomtab.gif" width="350" height="600"></div><p><div style="float:left;border:solid 1px 000;margin:2px;"><img src="https://raw.githubusercontent.com/zhaoxuning233/zhaoxuning233.github.io/master/2019/01/16/learn-kotlin-2/toptab.gif" width="350" height="600"></div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>还是用Material Design的新组件来实现，不仅美观而且高效已用，然后结合Kotlin实现。虽然一开始还不知道思路，但是可以从官方给出的demo下手，理清思路。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">打开android studio-&gt;new project-&gt;新建MainActivity时选择Bottom Navigation Activity</span><br></pre></td></tr></table></figure></p><p><img src="/2019/01/16/learn-kotlin-2/BottomActivity.png" alt></p><p>新建出来build之后，就发现了这么几个类</p><ul><li>MainActivity</li><li>activity_main.xml</li><li>navigation.xml</li></ul><p>就这么三个，内容极度舒适。接下来看一下代码</p><blockquote><p>MainActivity</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.demo.kotlin.demo20190116</span><br><span class="line"></span><br><span class="line">import android.os.Bundle</span><br><span class="line">import android.support.design.widget.BottomNavigationView</span><br><span class="line">import android.support.v7.app.AppCompatActivity</span><br><span class="line">import kotlinx.android.synthetic.main.activity_main.*</span><br><span class="line"></span><br><span class="line">class MainActivity : AppCompatActivity() &#123;</span><br><span class="line"></span><br><span class="line">    private val mOnNavigationItemSelectedListener = BottomNavigationView.OnNavigationItemSelectedListener &#123; item -&gt;</span><br><span class="line">        when (item.itemId) &#123;</span><br><span class="line">            R.id.navigation_home -&gt; &#123;</span><br><span class="line">                message.setText(R.string.title_home)</span><br><span class="line">                return@OnNavigationItemSelectedListener true</span><br><span class="line">            &#125;</span><br><span class="line">            R.id.navigation_dashboard -&gt; &#123;</span><br><span class="line">                message.setText(R.string.title_dashboard)</span><br><span class="line">                return@OnNavigationItemSelectedListener true</span><br><span class="line">            &#125;</span><br><span class="line">            R.id.navigation_notifications -&gt; &#123;</span><br><span class="line">                message.setText(R.string.title_notifications)</span><br><span class="line">                return@OnNavigationItemSelectedListener true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        navigation.setOnNavigationItemSelectedListener(mOnNavigationItemSelectedListener)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>activity_main.xml</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:id=&quot;@+id/container&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    tools:context=&quot;.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/message&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginLeft=&quot;@dimen/activity_horizontal_margin&quot;</span><br><span class="line">        android:layout_marginStart=&quot;@dimen/activity_horizontal_margin&quot;</span><br><span class="line">        android:layout_marginTop=&quot;@dimen/activity_vertical_margin&quot;</span><br><span class="line">        android:text=&quot;@string/title_home&quot;</span><br><span class="line">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</span><br><span class="line">        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.BottomNavigationView</span><br><span class="line">        android:id=&quot;@+id/navigation&quot;</span><br><span class="line">        android:layout_width=&quot;0dp&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginEnd=&quot;0dp&quot;</span><br><span class="line">        android:layout_marginStart=&quot;0dp&quot;</span><br><span class="line">        android:background=&quot;?android:attr/windowBackground&quot;</span><br><span class="line">        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;</span><br><span class="line">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</span><br><span class="line">        app:layout_constraintRight_toRightOf=&quot;parent&quot;</span><br><span class="line">        app:menu=&quot;@menu/navigation&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android.support.constraint.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure><blockquote><p>navigation.xml</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/navigation_home&quot;</span><br><span class="line">        android:icon=&quot;@drawable/ic_home_black_24dp&quot;</span><br><span class="line">        android:title=&quot;@string/title_home&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/navigation_dashboard&quot;</span><br><span class="line">        android:icon=&quot;@drawable/ic_dashboard_black_24dp&quot;</span><br><span class="line">        android:title=&quot;@string/title_dashboard&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/navigation_notifications&quot;</span><br><span class="line">        android:icon=&quot;@drawable/ic_notifications_black_24dp&quot;</span><br><span class="line">        android:title=&quot;@string/title_notifications&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/menu&gt;</span><br></pre></td></tr></table></figure><h2 id="ConstraintLayout"><a href="#ConstraintLayout" class="headerlink" title="ConstraintLayout"></a>ConstraintLayout</h2><p>约束布局ConstraintLayout 是一个ViewGroup，可以在Api9以上的Android系统使用它，它的出现主要是为了解决布局嵌套过多的问题，以灵活的方式定位和调整小部件。从 Android Studio 2.3 起，官方的模板默认使用 ConstraintLayout。ConstraintLayout能够减少布局的层级并改善布局性能，ConstraintLayout 能够灵活地定位和调整子View的大小，子 View 依靠约束关系来确定位置。在一个约束关系中，需要有一个 Source（源）以及一个 Target（目标），Source 的位置依赖于 Target，可以理解为“通过约束关系，Source 与 Target链接在了一起，Source 相对于 Target 的位置便是固定的了。</p><p>说了一大堆，还是不太懂，只是把它理解为相对布局的增强版就ok了。- -！</p><h2 id="BottomNavigationView"><a href="#BottomNavigationView" class="headerlink" title="BottomNavigationView"></a>BottomNavigationView</h2><p>底部导航的实现之一为BottomNavigationView，是design库下的一款控件，其中关键属性为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:menu=&quot;@menu/navigation&quot;</span><br></pre></td></tr></table></figure></p><p>需要定义一个menu，用来显示底部Tab的Item。如上面的navigation.xml，这样就可以在页面底部显示出一个Tab，不需要像原来那样自己写LinearLayout，里面嵌套ImageView和TextView了。</p><h2 id="OnNavigationItemSelectedListener"><a href="#OnNavigationItemSelectedListener" class="headerlink" title="OnNavigationItemSelectedListener"></a>OnNavigationItemSelectedListener</h2><p>现在只是编写好了xml，显示出了BottomNavigationView，但是他还不能滑动，这显然是不行的。所以要在MainActivity中编写Item的事件监听。代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private val mOnNavigationItemSelectedListener = BottomNavigationView.OnNavigationItemSelectedListener &#123; item -&gt;</span><br><span class="line">        when (item.itemId) &#123;</span><br><span class="line">            R.id.navigation_home -&gt; &#123;</span><br><span class="line">                message.setText(R.string.title_home)</span><br><span class="line">                return@OnNavigationItemSelectedListener true</span><br><span class="line">            &#125;</span><br><span class="line">            R.id.navigation_dashboard -&gt; &#123;</span><br><span class="line">                message.setText(R.string.title_dashboard)</span><br><span class="line">                return@OnNavigationItemSelectedListener true</span><br><span class="line">            &#125;</span><br><span class="line">            R.id.navigation_notifications -&gt; &#123;</span><br><span class="line">                message.setText(R.string.title_notifications)</span><br><span class="line">                return@OnNavigationItemSelectedListener true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        false</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="继续完善"><a href="#继续完善" class="headerlink" title="继续完善"></a>继续完善</h2><p>显然这不是我想追求的，起码每个Item得有一个对应的fragment用来显示。继续完善</p><blockquote><p><em>step 1 FrameLayout</em></p></blockquote><p>首先先把原先那个简陋的TextView给替换掉，如下<br><img src="/2019/01/16/learn-kotlin-2/FrameLayout.png" alt></p><blockquote><p><em>step 2 然后再定义三个Fragment和其xml文件，如下(第二个，第三个割了。墨迹)</em></p></blockquote><p><img src="/2019/01/16/learn-kotlin-2/FirstFragment.png" alt><br><img src="/2019/01/16/learn-kotlin-2/fragment_one_xml.png" alt></p><blockquote><p><em>step 3 最后看一下MainActivity，主角登场</em></p></blockquote><ul><li>首先百度了一下Kotlin中Fragment的添加，替换写法，发现真的好简单。写成函数的形式，即取即用。<br><img src="/2019/01/16/learn-kotlin-2/funFragment.png" alt></li><li>然后就是使用了，首先默认显示的是第一个Fragment吧，在页面加载时，就添加好<br><img src="/2019/01/16/learn-kotlin-2/onCreate.png" alt><br>上面的注解只是为了让编译器不报警告，我有强迫症，在此记录一下，弄明白这个注解的含义</li><li>最后重新写一下监听函数，用下面的fragment添加，替换方法很简单<br><img src="/2019/01/16/learn-kotlin-2/listener.png" alt></li></ul><blockquote><p><em>step 4 完整版来了,再运行一下</em></p></blockquote><p><img src="/2019/01/16/learn-kotlin-2/Full.png" alt></p><blockquote><p><em>step 5 效果出来了，还可以</em></p></blockquote><p><img src="https://raw.githubusercontent.com/zhaoxuning233/zhaoxuning233.github.io/master/2019/01/16/learn-kotlin-2/final1.gif" alt></p><h2 id="再实现一个上方的ViewPager"><a href="#再实现一个上方的ViewPager" class="headerlink" title="再实现一个上方的ViewPager"></a>再实现一个上方的ViewPager</h2><ul><li>先上xml<br><img src="/2019/01/16/learn-kotlin-2/activity2_xml.png" alt></li><li>关键点也不是Activity，代码如下<br><img src="/2019/01/16/learn-kotlin-2/Main2Activity.png" alt></li><li>关键点在于自定义的Adapter，用来调控ViewPager<br><img src="/2019/01/16/learn-kotlin-2/ContentPagerAdapter.png" alt></li></ul><p>总体来说还是很简单的，效果也实现出来了。哈哈<br><img src="https://raw.githubusercontent.com/zhaoxuning233/zhaoxuning233.github.io/master/2019/01/16/learn-kotlin-2/final2.gif" alt></p><p><strong>今天的总结到此结束了，感觉有积累了一些Kotlin的语法和用法，继续加油</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录学习路上的点滴&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://yoursite.com/categories/Kotlin/"/>
    
      <category term="Material Design" scheme="http://yoursite.com/categories/Kotlin/Material-Design/"/>
    
    
      <category term="Kotlin" scheme="http://yoursite.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>学习Kotlin第一篇</title>
    <link href="http://yoursite.com/2019/01/15/learn-kotlin-1/"/>
    <id>http://yoursite.com/2019/01/15/learn-kotlin-1/</id>
    <published>2019-01-15T00:38:57.000Z</published>
    <updated>2019-01-15T06:48:46.643Z</updated>
    
    <content type="html"><![CDATA[<p>记录学习路上的点滴<br><a id="more"></a></p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><blockquote><p>此效果实现并不复杂，此项目是在实现功能的基础上，主要学习Kotlin的语法，用法。</p></blockquote><p><img src="https://raw.githubusercontent.com/zhaoxuning233/zhaoxuning233.github.io/master/2019/01/15/learn-kotlin-1/screen.gif" alt></p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p><strong>此效果如果用老旧的Android Api实现将会非常复杂，不仅需要大量的动画，还需要计算高度渲染等复杂问题。但是如果用Material Design来实现将会非常简单。主要用到以下几个Material Design原生组件</strong></p><ul><li>CoordinatorLayout</li><li>AppBarLayout</li><li>CollapsingToolbarLayout</li><li>FloatingActionButton</li><li>NestedScrollView</li><li>CardView</li></ul><h2 id="CoordinatorLayout"><a href="#CoordinatorLayout" class="headerlink" title="CoordinatorLayout"></a>CoordinatorLayout</h2><p> <em>又名协调者布局，它是support.design包中的控件，所以使用的时候要导入compile ‘com.android.support:design:23.3.0’包。简单来说，CoordinatorLayout是用来协调其子view并以触摸影响布局的形式产生动画效果的一个super-powered FrameLayout，其典型的子View包括：FloatingActionButton，AppBarLayout。CoordinatorLayout是一个顶级父View</em></p><blockquote><p>简单来说，如果需要在布局中协调多个 View 进行互动，例如：移动、动画等等。在以前，是需要同时对这些 View 进行操作并响应各自的状态的，而有了 CoordinatorLayout ，这些它都帮我们实现好了交互的接口，我们只需要去关心具体的细节。<br>在 Material Design 中，很多地方都用到了 CoordinatorLayout，举几个例子：</p><ul><li>SnackBar 出现的时候，浮动操作按钮（FAB）上移。</li><li>配合 ToolBar ，实现一个可伸缩头部 Title。</li><li>配合 AppBarLayout，实现一个具体的是视差动画的效果。</li></ul></blockquote><p><strong>虽然这里讲的是 CoordinatorLayout ，但是其实对于开发者而言，我们是不会和 CoordinatorLayout 直接打交道的，而 CoordinatorLayout 透出来的接口 Behavior 才是我们需要关心和实现的。<br>CoordinatorLayout 和 Behavior 之间进行交互，将其内需要被协调的 View ，之间的变动，通过 Behavior 传递出来，开发者只需要针对 Behavior 中定义好的接口方法，进行对应的实现即可。</strong></p><h3 id="如下一个CoordinatorLayout布局就写好了，很简单，想象成LinearLayout就ok了，因为他也是个父布局。"><a href="#如下一个CoordinatorLayout布局就写好了，很简单，想象成LinearLayout就ok了，因为他也是个父布局。" class="headerlink" title="如下一个CoordinatorLayout布局就写好了，很简单，想象成LinearLayout就ok了，因为他也是个父布局。"></a>如下一个CoordinatorLayout布局就写好了，很简单，想象成LinearLayout就ok了，因为他也是个父布局。</h3><p><img src="/2019/01/15/learn-kotlin-1/CoordinatorLayout布局.png" alt></p><blockquote><p>补充<br><br>android:fitsSystemWindows=”true” 属性可以让view根据系统窗口来调整自己的布局；简单点说就是我们在设置应用布局时是否考虑系统窗口布局，这里系统窗口包括系统状态栏、导航栏、输入法等。效果如下</p></blockquote><div style="float:left;border:solid 1px 000;margin:2px;"><img src="/2019/01/15/learn-kotlin-1/../learn-kotlin-1\Toolbar默认.png" width="400" height="460"></div><p><div style="float:left;border:solid 1px 000;margin:2px;"><img src="/2019/01/15/learn-kotlin-1/../learn-kotlin-1\ToolBar适配.png" width="400" height="460"></div><br></p><h2 id="AppBarLayout"><a href="#AppBarLayout" class="headerlink" title="AppBarLayout"></a>AppBarLayout</h2><p><em>AppbarLayout继承自LinearLayout,它就是一个垂直方向的LinearLayout,在LinearLayout的基础上添加了一些材料设计的概念和特性，即滑动手势。它可以让你定制在某个可滑动的View（如：ScrollView ,ListView ,RecyclerView 等）滑动手势发生改变时，内部的子View 该做什么动作。子View应该提供滑动时他们期望的响应的动作Behavior,通过setScrollFlags(int)，或者xml 中使用属性</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:layout_scrollFlags</span><br></pre></td></tr></table></figure></p><blockquote><p>注意：AppbarLayout 严重依赖于CoordinatorLayout，必须用于CoordinatorLayout 的直接子View，如果你将AppbarLayout 放在其他的ViewGroup 里面，那么它的这些功能是无效的。</p></blockquote><p>AppBarLayou的scrollFlagsscroll效果一共有五种(篇幅有限，以后自己亲自试验吧，不贴图了)</p><ul><li>scroll</li><li>enterAlways</li><li>enterAlwaysCollapsed</li><li>exitUntilCollapsed</li><li>snap</li></ul><p><img src="/2019/01/15/learn-kotlin-1/AppBarLayout.png" alt></p><h2 id="CollapsingToolbarLayout"><a href="#CollapsingToolbarLayout" class="headerlink" title="CollapsingToolbarLayout"></a>CollapsingToolbarLayout</h2><p>_CollapsingToolbarLayout作用是提供了一个可以折叠的Toolbar，它继承至FrameLayout，给它设置layout_scrollFlags就可以实现折叠效果_</p><p>CollapsingToolbarLayout的子布局有3种折叠模式（Toolbar中设置的app:layout_collapseMode）</p><ul><li>off：这个是默认属性，布局将正常显示，没有折叠的行为。</li><li>pin：CollapsingToolbarLayout折叠后，此布局将固定在顶部。</li><li>parallax：CollapsingToolbarLayout折叠时，此布局也会有视差折叠效果。</li></ul><p>当CollapsingToolbarLayout的子布局设置了parallax模式时，我们还可以通过app:layout_collapseParallaxMultiplier设置视差滚动因子，值为：0~1。</p><p><img src="/2019/01/15/learn-kotlin-1/CollapsingToolbarLayout.png" alt></p><p>然后在CollapsingToolbarLayout中加入自己的布局，一般会放置一个ToolBar。如下Bilibili的效果图(来个最喜欢的主播真会玩：D)<br><img src="https://raw.githubusercontent.com/zhaoxuning233/zhaoxuning233.github.io/master/2019/01/15/learn-kotlin-1/bilibili.gif" alt></p><p>继续编写ToolBar和上面的一个ImageView，如下<br><img src="/2019/01/15/learn-kotlin-1/ToolBarImageView.png" alt><br><img src="/2019/01/15/learn-kotlin-1/demo1.png" alt></p><h2 id="FloatingActionButton"><a href="#FloatingActionButton" class="headerlink" title="FloatingActionButton"></a>FloatingActionButton</h2><p><em>FloatingActionButton简称FAB。<br>FAB代表一个App或一个页面中最主要的操作，如果一个App的每个页面都有FAB,则通常表示该App最主要的功能是通过该FAB操作的。<br>为了突出FAB的重要性，一个页面最好只有一个FAB。个人觉得这就是一个海拔高度最高的全局按钮Button</em><br><img src="/2019/01/15/learn-kotlin-1/fab.png" alt><br><img src="/2019/01/15/learn-kotlin-1/demo2.png" alt></p><h2 id="NestedScrollView"><a href="#NestedScrollView" class="headerlink" title="NestedScrollView"></a>NestedScrollView</h2><p><em>NestedScrollView 即 支持嵌套滑动的 ScrollView。<br>因此，我们可以简单的把 NestedScrollView 类比为 ScrollView，其作用就是作为控件父布局，从而具备（嵌套）滑动功能。<br>NestedScrollView 与 ScrollView 的区别就在于 NestedScrollView 支持 嵌套滑动，无论是作为父控件还是子控件，嵌套滑动都支持，且默认开启。<br>因此，在一些需要支持嵌套滑动的情景中，比如一个 ScrollView 内部包裹一个 RecyclerView，那么就会产生滑动冲突，这个问题就需要你自己去解决。而如果使用 NestedScrollView 包裹 RecyclerView，嵌套滑动天然支持，你无需做什么就可以实现前面想要实现的功能了。</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NestedScrollView内部必须有一个父级布局的layout，如LinearLayout，RelativeLayout</span><br></pre></td></tr></table></figure><p><img src="/2019/01/15/learn-kotlin-1/NestedScrollView.png" alt></p><p>Ok，到了现在，基本完成了，想要实现的效果，全都是xml实现的，真是神奇啊。效果图如下<br><img src="https://raw.githubusercontent.com/zhaoxuning233/zhaoxuning233.github.io/master/2019/01/15/learn-kotlin-1/exit.gif" alt></p><h2 id="CardView"><a href="#CardView" class="headerlink" title="CardView"></a>CardView</h2><p>CardView是google在5.0中提供带圆角和阴影的布局，继承自FrameLayout</p><p>CardView的一些属性设置</p><ul><li>android:cardBackgroundColor 设置背景</li><li>android:cardCornerRadius 设置圆角</li><li>app:cardElevation 设置阴影大小</li><li>app:cardMaxElevation 设置阴影的最大高度</li><li>app:contentPadding 内容距离边界的距离</li><li>app:contentPaddingXXX 设置局部的内边距，替换Padding的，在CardView中设置Padding是不起作用的。</li><li>app:cardUseCompatPadding 如果您需要将CardView与其他视图对齐，可能在21以下，可以将此标志设置为true，CardView将在21之后的平台上添加相同的填充值。</li><li>app:cardPreventCornerOverlap 是否裁剪边界以防止重叠</li></ul><p>实现方式如下<br><img src="/2019/01/15/learn-kotlin-1/cardview.png" alt></p><blockquote><p>以上就可以，实现上面要实现的效果了，但是为了初步学习Kotlin，只是写写简单的xml就没意思了，先动手写个列表吧，那就先把底下的CardView都拿掉，开始写个最简单的列表</p></blockquote><h2 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h2><p><img src="/2019/01/15/learn-kotlin-1/MainActivity.png" alt></p><h2 id="activity-main"><a href="#activity-main" class="headerlink" title="activity_main"></a>activity_main</h2><p><img src="/2019/01/15/learn-kotlin-1/activity_main.png" alt></p><h2 id="MainAdapter"><a href="#MainAdapter" class="headerlink" title="MainAdapter"></a>MainAdapter</h2><p><img src="/2019/01/15/learn-kotlin-1/MainAdapter.png" alt></p><h2 id="item-text"><a href="#item-text" class="headerlink" title="item_text"></a>item_text</h2><p><img src="/2019/01/15/learn-kotlin-1/item_text.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kotlin小总结</span><br><span class="line">1.对象不用new了，直接等号后面写类名，然后传参数</span><br><span class="line">2.由于import kotlinx.android.synthetic.main.activity_about.* 这句话的存在，不用写findviewbyid了，直接用控件在xml中的id，就可以操作了</span><br><span class="line">3.构造集合的方式 val mList: ArrayList&lt;String&gt; = arrayListOf()</span><br><span class="line">4.变量用var，常量用val，先这么理解</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录学习路上的点滴&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://yoursite.com/categories/Kotlin/"/>
    
      <category term="Material Design" scheme="http://yoursite.com/categories/Kotlin/Material-Design/"/>
    
    
      <category term="Kotlin" scheme="http://yoursite.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>记录搭建酸酸的一次经过</title>
    <link href="http://yoursite.com/2018/09/04/%E6%90%AD%E5%BB%BA%E9%85%B8%E9%85%B8%E7%9A%84%E4%B8%80%E6%AC%A1%E7%BB%8F%E8%BF%87/"/>
    <id>http://yoursite.com/2018/09/04/搭建酸酸的一次经过/</id>
    <published>2018-09-04T03:35:32.000Z</published>
    <updated>2018-09-05T02:50:37.606Z</updated>
    
    <content type="html"><![CDATA[<p>此教程记录如何购买一个vps来搭建属于自己的vpn，进行科学上网<br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上大学那会儿曾记否，当年在下为大多数妓院男生提供了宝贵的精神食粮（懂得都懂）。<br>记得当时找到一个特牛逼的日本网址，上面充满了花里胡哨的图片和视频。这才练就了一身的好本事。<br>反正这些年一直用一个在淘宝上认识的vpn卖家，用了好多年，信誉不错，就是每个月17块有点烦，贵且繁琐。期间还用一些chrome的插件应用来翻墙（付费的）<br><br>废话不多说了，早有想法搭建一个属于自己的vpn，到时候也不用害怕多端登录掉线，速度慢这些蛋疼的问题了，说干就干。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><em>以下以我本人的环境进行记录</em></p><ul><li>操作系统：Windows 10 专业版</li><li>vps平台：搬瓦工VPS</li><li>代理软件：酸酸（shadowsock）</li><li>命令操作工具：cmd</li></ul><h2 id="购买-VPS"><a href="#购买-VPS" class="headerlink" title="购买 VPS"></a>购买 VPS</h2><p><em>VPS:Virtual Private Server 虚拟专用服务器</em><br><br><em>个人理解为一个远程的虚拟的有一套独立的操作系统的一个小的服务器</em></p><ul><li>进入官网首页</li><li>点击VPS Hosting，如下为准备购买的VPS服务器配置，注意点击购买KVM类型。<br><img src="/2018/09/04/搭建酸酸的一次经过/购买.png" alt></li><li>一路点击下一步（关于英文请自行翻译），选择服务器时需要注意，如图所示，尽量选择洛杉矶的机房，速度更快一些（玄学）<br><img src="/2018/09/04/搭建酸酸的一次经过/购买时选择服务器.png" alt></li></ul><h2 id="购买成功"><a href="#购买成功" class="headerlink" title="购买成功"></a>购买成功</h2><ul><li>购买完成后登录搬瓦工，会来到下图所示界面。按照图中提示，我们点击 KiwiVM Control Panel 前往搬瓦工 KiwiVM 控制面板。<br><img src="/2018/09/04/搭建酸酸的一次经过/购买完成后的总状态显示.png" alt></li><li>点击 KiwiVM Control Panel 后，会来到下图所示界面。按照图中提示，先点击stop停止服务器。<br><img src="/2018/09/04/搭建酸酸的一次经过/服务器状态截图.png" alt></li><li>点击 stop 停止服务器后，等待 3~5 秒即可。按照下图提示，首先点击左侧的 Install new OS，然后选择 centos-7-x86_64-bbr，然后打钩同意 I agree that …，最后点击Reload将系统重装为centos-7-x86_64-bbr即可。<br><img src="/2018/09/04/搭建酸酸的一次经过/新装系统.png" alt></li><li>点击 Reload 后，会来到下图所示界面。按照图中提示，我们将SSH连接密码和SSH连接端口保存到记事本中，后面需要用到。忘记保存的请查看注册邮箱内的邮件，里面有相同信息。<br><img src="/2018/09/04/搭建酸酸的一次经过/端口密码.png" alt><br><strong>注意 SSH 连接密码是用来连接服务器的，不是用来连接 Shadowsocks 的</strong></li></ul><h2 id="使用-XShell-连接搬瓦工服务器"><a href="#使用-XShell-连接搬瓦工服务器" class="headerlink" title="使用 XShell 连接搬瓦工服务器"></a>使用 XShell 连接搬瓦工服务器</h2><ul><li><p>下载xShell进行Windows系统上的远程连接，MacOS请打开终端进行操作。</p><blockquote><p>下载地址:<a href="https://www.lanzous.com/i0e157c" target="_blank" rel="noopener">https://www.lanzous.com/i0e157c</a></p></blockquote></li><li><p>点击新建如下图所示<br><img src="/2018/09/04/搭建酸酸的一次经过/xshell1.png" alt></p></li><li><p>填写连接服务器的必填信息，步骤如下图所示<br><img src="/2018/09/04/搭建酸酸的一次经过/xshell2.png" alt><br><img src="/2018/09/04/搭建酸酸的一次经过/xshell3.png" alt><br><img src="/2018/09/04/搭建酸酸的一次经过/xshell4.png" alt><br><img src="/2018/09/04/搭建酸酸的一次经过/xshell5.png" alt></p></li><li><p>点击接受并保存按钮后，Xshell 软件会继续连接搬瓦工，连接成功后会出现下图中的提示信息,此时我们已经成功通过 Xshell 软件连接了搬瓦工，后面只需要运行所需命令即可操作此 VPS。<br><img src="/2018/09/04/搭建酸酸的一次经过/xshell6.png" alt></p></li></ul><h2 id="搭建-Shadowsocks-服务"><a href="#搭建-Shadowsocks-服务" class="headerlink" title="搭建 Shadowsocks 服务"></a>搭建 Shadowsocks 服务</h2><ul><li>使用xShell成功连接VPS后，输入以下命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget --no-check-certificate -O shadowsocks-libev_CN.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/shadowsocks-libev_CN.sh &amp;&amp; bash shadowsocks-libev_CN.sh</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2018/09/04/搭建酸酸的一次经过/安装1.png" alt></p><ul><li><p>回车后系统会进入安装界面。按照下图提示，我们首先依次输入 SS 的各项信息，然后回车继续即可。<br><img src="/2018/09/04/搭建酸酸的一次经过/安装2.png" alt></p></li><li><p>安装过程耗时 2~5 分钟，完成后会来到下图界面，请把图中四行红字信息保存下来，方便以后查询使用。<br><img src="/2018/09/04/搭建酸酸的一次经过/安装3.png" alt></p></li></ul><h2 id="安装锐速-TCP-加速软件"><a href="#安装锐速-TCP-加速软件" class="headerlink" title="安装锐速 TCP 加速软件"></a>安装锐速 TCP 加速软件</h2><ul><li><p>输入以下命令来进行加速软件的安装，听说安装后速度提升10倍左右，当然网速足够好不装也行啊。 : )</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/rskernel.sh &amp;&amp; bash rskernel.sh</span><br></pre></td></tr></table></figure><p>运行提示如图：<br><img src="/2018/09/04/搭建酸酸的一次经过/tcp1.png" alt></p></li><li><p>回车后系统会自动下载脚本并执行更换内核命令。按照下图提示，我们可以看到当前系统为 CentOS7，等待内核更换完毕后系统会自动重启并断开连接。<br><img src="/2018/09/04/搭建酸酸的一次经过/tcp2.png" alt></p></li><li><p>系统重启后，Xshell 软件会断开连接。等待 3~5 分钟服务器即可重启完毕，我们重新连接服务器，按照下图提示，我们继续复制命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install net-tools -y &amp;&amp; wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install</span><br></pre></td></tr></table></figure><p><img src="/2018/09/04/搭建酸酸的一次经过/tcp3.png" alt></p></li><li><p>回车后系统会自动下载脚本并执行。按照下图提示,接下来一路激动地回车就完事儿了 : &gt;<br><img src="/2018/09/04/搭建酸酸的一次经过/tcp4.png" alt><br><img src="/2018/09/04/搭建酸酸的一次经过/tcp5.png" alt><br><img src="/2018/09/04/搭建酸酸的一次经过/tcp6.png" alt></p></li></ul><p><strong>到此VPS的远程配置全部结束，开始尽情使用</strong></p><h2 id="下载酸酸，配置酸酸"><a href="#下载酸酸，配置酸酸" class="headerlink" title="下载酸酸，配置酸酸"></a>下载酸酸，配置酸酸</h2><table><thead><tr><th>系统</th><th>地址</th></tr></thead><tbody><tr><td>Windows</td><td><a href="https://www.banwagongzw.com/goto/?url=aHR0cHM6Ly9jdXJscy5mdW4vU2hhZG93c29ja3MvU2hhZG93c29ja3MtV2luZG93cy00LjAuOS56aXA=" target="_blank" rel="noopener">https://www.banwagongzw.com/goto/?url=aHR0cHM6Ly9jdXJscy5mdW4vU2hhZG93c29ja3MvU2hhZG93c29ja3MtV2luZG93cy00LjAuOS56aXA=</a></td></tr><tr><td>MacOS</td><td><a href="https://www.banwagongzw.com/goto/?url=aHR0cHM6Ly9jdXJscy5mdW4vU2hhZG93c29ja3MvU2hhZG93c29ja3MtTWFjT1MtMi42LjMuemlw" target="_blank" rel="noopener">https://www.banwagongzw.com/goto/?url=aHR0cHM6Ly9jdXJscy5mdW4vU2hhZG93c29ja3MvU2hhZG93c29ja3MtTWFjT1MtMi42LjMuemlw</a></td></tr><tr><td>Android</td><td><a href="https://www.banwagongzw.com/goto/?url=aHR0cHM6Ly9jdXJscy5mdW4vU2hhZG93c29ja3MvU2hhZG93c29ja3MtQW5kcm9pZC00LjUuMS5hcGs=" target="_blank" rel="noopener">https://www.banwagongzw.com/goto/?url=aHR0cHM6Ly9jdXJscy5mdW4vU2hhZG93c29ja3MvU2hhZG93c29ja3MtQW5kcm9pZC00LjUuMS5hcGs=</a></td></tr><tr><td>iPhone</td><td>自己滚去AppStore花6元下载</td></tr></tbody></table><ul><li><p>配置酸酸，如图</p><p><strong>请按照自己的VPS信息填写，填写错误无法成功</strong><br><img src="/2018/09/04/搭建酸酸的一次经过/ss.png" alt></p></li><li><p>设置pac代理并开机自启动<br><img src="/2018/09/04/搭建酸酸的一次经过/ss2.png" alt></p></li></ul><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><p>打开google或者其他不可告人的网站来检验一下自己的劳动成果吧,我反正成功了 :D</p></blockquote><p><img src="/2018/09/04/搭建酸酸的一次经过/google.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此教程记录如何购买一个vps来搭建属于自己的vpn，进行科学上网&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="翻墙" scheme="http://yoursite.com/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>重回博客</title>
    <link href="http://yoursite.com/2018/09/04/%E9%87%8D%E5%9B%9E%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/09/04/重回博客/</id>
    <published>2018-09-04T02:49:57.000Z</published>
    <updated>2018-09-06T02:25:46.505Z</updated>
    
    <content type="html"><![CDATA[<p>重新搭建博客<br><a id="more"></a></p><h2 id="将你原来电脑上已经配置好并生成的hexo目录拷到你的新电脑上，注意无需拷全部，只拷如下几个目录"><a href="#将你原来电脑上已经配置好并生成的hexo目录拷到你的新电脑上，注意无需拷全部，只拷如下几个目录" class="headerlink" title="将你原来电脑上已经配置好并生成的hexo目录拷到你的新电脑上，注意无需拷全部，只拷如下几个目录"></a>将你原来电脑上已经配置好并生成的hexo目录拷到你的新电脑上，注意无需拷全部，只拷如下几个目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">scaffolds/</span><br><span class="line">source/</span><br><span class="line">themes/</span><br></pre></td></tr></table></figure><blockquote><p>将这些目录放到一个目录下，如：hexo／</p></blockquote><h2 id="在你的新电脑上首先配置hexo环境"><a href="#在你的新电脑上首先配置hexo环境" class="headerlink" title="在你的新电脑上首先配置hexo环境"></a>在你的新电脑上首先配置hexo环境</h2><h3 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h3><ul><li><p>下载链接：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a>  </p><blockquote><p>LTS:长期稳定版 Current:当前最新版</p></blockquote><h3 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h3></li><li><p>安装hexo，执行命令：</p><blockquote><p>npm install -g hexo</p></blockquote></li></ul><h2 id="安装好之后，进入hexo／目录"><a href="#安装好之后，进入hexo／目录" class="headerlink" title="安装好之后，进入hexo／目录"></a>安装好之后，进入hexo／目录</h2><h2 id="模块安装，依次执行命令："><a href="#模块安装，依次执行命令：" class="headerlink" title="模块安装，依次执行命令："></a>模块安装，依次执行命令：</h2><blockquote><p>npm install</p></blockquote><blockquote><p>npm install hexo-deployer-git –save</p></blockquote><blockquote><p>npm install hexo-generator-feed –save</p></blockquote><blockquote><p>npm install hexo-generator-sitemap –save</p></blockquote><h2 id="部署，依次执行命令"><a href="#部署，依次执行命令" class="headerlink" title="部署，依次执行命令"></a>部署，依次执行命令</h2><blockquote><p>hexo g</p></blockquote><blockquote><p>hexo deploy</p></blockquote><h2 id="其他须知"><a href="#其他须知" class="headerlink" title="其他须知"></a><em>其他须知</em></h2><blockquote><p>hexo s</p></blockquote><ul><li>命令可以进行本地的快速部署，进行快速预览</li></ul><blockquote><p>hexo s -p 5000</p></blockquote><ul><li>hexo默认的端口是4000。有时会有其他进程占用4000端口的情况，导致无法访问。如出现这种情况，可采用以上的命令更改本地快速预览的端口。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;重新搭建博客&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="日常" scheme="http://yoursite.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="日常" scheme="http://yoursite.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>docker搭建gitlab</title>
    <link href="http://yoursite.com/2018/03/26/docker%E6%90%AD%E5%BB%BAgitlab/"/>
    <id>http://yoursite.com/2018/03/26/docker搭建gitlab/</id>
    <published>2018-03-26T04:14:57.000Z</published>
    <updated>2019-03-11T09:01:43.549Z</updated>
    
    <content type="html"><![CDATA[<p>此教程记录如何在docker搭建gitlab<br><a id="more"></a></p><h2 id="1-下载docker"><a href="#1-下载docker" class="headerlink" title="1.下载docker"></a>1.下载docker</h2><ul><li>在docker官网 <strong><a href="https://www.docker.com/community-edition#/download" target="_blank" rel="noopener">https://www.docker.com/community-edition#/download</a></strong> 中下载Docker for Windows 17.12.0-ce-win47版本<br><img src="/2018/03/26/docker搭建gitlab/下载.png" alt><br><img src="/2018/03/26/docker搭建gitlab/下载2.png" alt></li></ul><h2 id="2-下载完成"><a href="#2-下载完成" class="headerlink" title="2.下载完成"></a>2.下载完成</h2><ul><li>下载完成后，打开文件夹找到相应的安装包<br><img src="/2018/03/26/docker搭建gitlab/downloadover.png" alt><br><img src="/2018/03/26/docker搭建gitlab/installing.png" alt></li></ul><h2 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h2><ul><li>下载完成后，双击打开安装包，进行安装，安装完毕，出现此界面表示docker安装成功<br><img src="/2018/03/26/docker搭建gitlab/dockerrun.png" alt></li></ul><h2 id="4-加速器注册"><a href="#4-加速器注册" class="headerlink" title="4.加速器注册"></a>4.加速器注册</h2><ul><li>下载安装成功之后，在DaoCloud官网 <strong><a href="http://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener">http://www.daocloud.io/mirror#accelerator-doc</a></strong> 中注册账号获取加速器地址。<br><img src="/2018/03/26/docker搭建gitlab/daocloud加速器.png" alt></li></ul><h2 id="5-配置加速器"><a href="#5-配置加速器" class="headerlink" title="5.配置加速器"></a>5.配置加速器</h2><ul><li>在docker中配置加速器，docker–perferences(setting)–Daemon–Registry mirrors中填写加速器地址<br><img src="/2018/03/26/docker搭建gitlab/docker-daemon.png" alt></li></ul><blockquote><p>或在Daemon中从Basic切换Advanced，写入如下json</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot; : [</span><br><span class="line">    &quot;http://8deb9df7.m.daocloud.io&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;debug&quot; : true,</span><br><span class="line">  &quot;experimental&quot; : true,</span><br><span class="line">  &quot;max-concurrent-downloads&quot; : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>max-concurrent-downloads” : 1 (表示下载线程数为1，不会出现线程卡死的情况)</strong></p></blockquote><h2 id="6-下载Gitlab镜像"><a href="#6-下载Gitlab镜像" class="headerlink" title="6.下载Gitlab镜像"></a>6.下载Gitlab镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$docker pull gitlab/gitlab-ce</span><br></pre></td></tr></table></figure><p><img src="/2018/03/26/docker搭建gitlab/pull-gitlab.png" alt></p><h2 id="7-错误整理"><a href="#7-错误整理" class="headerlink" title="7.错误整理"></a>7.错误整理</h2><p>如上步骤安装完docker之后，运行下载Gitlab命令无效，推测可能是因为加速器配置无效导致的。如下图所示</p><p><img src="/2018/03/26/docker搭建gitlab/docker配置加速器后无效.png" alt></p><h3 id="7-1-系统版本"><a href="#7-1-系统版本" class="headerlink" title="7.1 系统版本"></a>7.1 系统版本</h3><ul><li>如下为电脑的系统版本</li></ul><p><img src="/2018/03/26/docker搭建gitlab/电脑系统版本.png" alt></p><ul><li>尝试添加https仍然无效</li></ul><p><img src="尝试添加https.png" alt></p><ul><li>按照网上的其他答案，参照修改了dns和关闭防火墙，依然无效</li></ul><p><img src="/2018/03/26/docker搭建gitlab/修改dns.png" alt><br><strong>未完，持续补充。。。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此教程记录如何在docker搭建gitlab&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>java集合框架学习（Set篇）</title>
    <link href="http://yoursite.com/2018/01/31/java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0(Set)/"/>
    <id>http://yoursite.com/2018/01/31/java集合框架学习(Set)/</id>
    <published>2018-01-31T09:48:57.000Z</published>
    <updated>2019-03-11T09:02:32.384Z</updated>
    
    <content type="html"><![CDATA[<p>java集合框架学习（Set篇）<br><a id="more"></a></p><h2 id="什么是Set"><a href="#什么是Set" class="headerlink" title="什么是Set?"></a>什么是Set?</h2><p>Set和List一样，也继承于Collection,是集合的一种。和List不同的是，Set内部实现是基于Map的，所以Set取值时不保证数据和存入的时候顺序一致，并且不允许空值，不允许重复值。</p><p><img src="http://img.blog.csdn.net/20161023191717442" alt></p><p><strong>Set的继承结构</strong><br><img src="http://img.blog.csdn.net/20161023193400390" alt></p><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet ?"></a>HashSet ?</h2><p>HashSet主要由HashMap实现,该体系集合可以知道某物是否已近存在于集合中,不会存储重复的元素。如果调用HashSet的无参构造函数，那么就会使用默认的HashMap，初始化Size为16，扩张系数为0.75。</p><blockquote><p>HashSet不存入重复元素的规则.使用hashcode和equals。由于Set集合是不能存入重复元素的集合。那么HashSet也是具备这一特性的。HashSet如何检查重复？HashSet会通过元素的hashcode（）和equals方法进行判断元素师否重复。</p></blockquote><p><em>HashSet用法(基本数据类型)</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Demo4 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // Set 集合存和取的顺序不一致。</span><br><span class="line">        Set hs = new HashSet();</span><br><span class="line">        hs.add(&quot;世界军事&quot;);</span><br><span class="line">        hs.add(&quot;兵器知识&quot;);</span><br><span class="line">        hs.add(&quot;舰船知识&quot;);</span><br><span class="line">        hs.add(&quot;汉和防务&quot;);</span><br><span class="line"></span><br><span class="line">        // 返回此 set 中的元素的数量</span><br><span class="line">        System.out.println(hs.size()); // 4</span><br><span class="line"></span><br><span class="line">        // 如果此 set 尚未包含指定元素，则返回 true</span><br><span class="line">        boolean add = hs.add(&quot;世界军事&quot;); // false</span><br><span class="line">        System.out.println(add);</span><br><span class="line"></span><br><span class="line">        // 返回此 set 中的元素的数量</span><br><span class="line">        System.out.println(hs.size());// 4</span><br><span class="line">        Iterator it = hs.iterator();</span><br><span class="line">        while (it.hasNext()) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>HashSet用法(自定义对象)</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">public class Demo4 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        HashSet hs = new HashSet();</span><br><span class="line">        hs.add(new Person(&quot;jack&quot;, 20));</span><br><span class="line">        hs.add(new Person(&quot;rose&quot;, 20));</span><br><span class="line">        hs.add(new Person(&quot;hmm&quot;, 20));</span><br><span class="line">        hs.add(new Person(&quot;lilei&quot;, 20));</span><br><span class="line">        hs.add(new Person(&quot;jack&quot;, 20));</span><br><span class="line"></span><br><span class="line">        Iterator it = hs.iterator();</span><br><span class="line">        while (it.hasNext()) &#123;</span><br><span class="line">            Object next = it.next();</span><br><span class="line">            System.out.println(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    Person() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Person(String name, int age) &#123;</span><br><span class="line"></span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int hashCode() &#123;</span><br><span class="line">        System.out.println(&quot;hashCode:&quot; + this.name);</span><br><span class="line">        return this.name.hashCode() + age * 37;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object obj) &#123;</span><br><span class="line">        System.out.println(this + &quot;---equals---&quot; + obj);</span><br><span class="line">        if (obj instanceof Person) &#123;</span><br><span class="line">            Person p = (Person) obj;</span><br><span class="line">            return this.name.equals(p.name) &amp;&amp; this.age == p.age;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line"></span><br><span class="line">        return &quot;Person@name:&quot; + this.name + &quot; age:&quot; + this.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><em>HashSet到底是如何判断两个元素重复</em></strong></p><p>通过hashCode方法和equals方法来保证元素的唯一性，add()返回的是boolean类型</p><p>判断两个元素是否相同，先要判断元素的hashCode值是否一致，只有在该值一致的情况下，才会判断equals方法，如果存储在HashSet中的两个对象hashCode方法的值相同equals方法返回的结果是true，那么HashSet认为这两个元素是相同元素，只存储一个（重复元素无法存入）。</p><p>注意：HashSet集合在判断元素是否相同先判断hashCode方法，如果相同才会判断equals。如果不相同，是不会调用equals方法的。</p><ul><li>HashSet 和ArrayList集合都有判断元素是否相同的方法，</li><li>HashSet使用hashCode和equals方法，ArrayList使用了equals方法</li></ul><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet ?"></a>TreeSet ?</h2><p>现在有一批数据，要求不能重复存储元素，而且要排序。ArrayList 、 LinkedList不能去除重复数据。HashSet可以去除重复，但是是无序。所以这时候就要使用TreeSet了。</p><blockquote><p><em>TreeSet和TreeMap相似，不写了</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java集合框架学习（Set篇）&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
